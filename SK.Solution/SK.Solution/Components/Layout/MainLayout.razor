@using SK.Solution.Utility
@inherits LayoutComponentBase
@inject AuthenticationStateProvider _AuthenticationStateProvider
<div class="page">
    <AuthorizeView Roles="@RoleType.Admin">
       
        <div class="sidebar">
            <NavMenu />
            
        </div>
        
    </AuthorizeView>


    <main>
        @if (_navBarVisible)
        {
            <NavBar></NavBar>
            
        }
       
        <AuthorizeView Roles="@RoleType.Admin">
            <Authorized>
                 <div class="top-row px-4">
                <div class="nav-item px-3">
                    <a class="nav-link p-2" href="Account/Manage">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> @context.User.Identity?.Name
                    </a>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left text-black" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
                </div>
            </Authorized>
            
        
            
        
        </AuthorizeView>
        

        
            @Body
       
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool _navBarVisible;
    protected override async Task OnInitializedAsync()
    {
        _navBarVisible = await ShowNavBar();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _navBarVisible = await ShowNavBar();
    }

    private async Task<bool> ShowNavBar()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isAuthenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        if (!isAuthenticated)
        {
            return true;
        }

        //Navbar should not be visible to admin
        if (!user.IsInRole(RoleType.Admin))
        {
            return true;
        }

        return false;
    }
}
