@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using MediatR
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SK.Solution.Data
@using SK.Solution.Shared.Events
@using SK.Solution.Utility
@using System.Threading
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IPublisher _publisher

<PageTitle>Register</PageTitle>


<style>
    .background-radial-gradient {
        background-color: hsl(218, 41%, 15%);
        background-image: radial-gradient(650px circle at 0% 0%, hsl(218, 41%, 35%) 15%, hsl(218, 41%, 30%) 35%, hsl(218, 41%, 20%) 75%, hsl(218, 41%, 19%) 80%, transparent 100%), radial-gradient(1250px circle at 100% 100%, hsl(218, 41%, 45%) 15%, hsl(218, 41%, 30%) 35%, hsl(218, 41%, 20%) 75%, hsl(218, 41%, 19%) 80%, transparent 100%);
    }

    .bg-glass {
        background-color: hsla(0, 0%, 100%, 0.9) !important;
        backdrop-filter: saturate(200%) blur(25px);
    }

    .full-height {
        height: 100vh;
    }
</style>

<section class="background-radial-gradient overflow-hidden">
    <div class="container d-flex justify-content-center align-items-center full-height px-4 py-5 px-md-5 text-center text-lg-start">
        <div class="row gx-lg-5 align-items-center mb-5 w-100">
            <div class="col-lg-6 mb-5 mb-lg-0">
                <h1 class="my-5 display-5 fw-bold" style="color: hsl(218, 81%, 95%)">
                    Create Your Account <br />
                    <span style="color: hsl(218, 81%, 75%)">Join us today!</span>
                </h1>
                <p class="mb-4 opacity-70" style="color: hsl(218, 81%, 85%)">
                    Sign up to access all our features. It only takes a few seconds!
                </p>
            </div>

            <div class="col-lg-6">
                <div class="card bg-white shadow-lg">
                    <div class="card-body px-4 py-5 px-md-5">
                        <StatusMessage Message="@Message" />
                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                            <DataAnnotationsValidator />
                            

                           
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.FirstName" class="form-control form-control-lg" autocomplete="username" aria-required="true" placeholder="Kalil" />
                                    <label for="FirstName"> First Name</label>
                                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.LastName" class="form-control form-control-lg" autocomplete="username" aria-required="true" placeholder="Safraoui" />
                                    <label for="LastName"> Last Name</label>
                                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                                </div>
                               
                            

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control form-control-lg" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email" class="form-label">Email</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control form-control-lg" autocomplete="current-password" aria-required="true" placeholder="password" />
                                <label for="password" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control form-control-lg" autocomplete="current-password" aria-required="true" placeholder="Confirm Password" />
                                <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                            </div>

                            <button type="submit" class="w-100 btn btn-lg btn-primary fw-bold rounded-3">Register</button>

                        </EditForm>
                        <ExternalLoginPicker />
                        <div class="mt-3 text-center">
                            <a href="/Account/Login" class="text-muted">Already have an account? Log in</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");
        if (!await RoleManager.RoleExistsAsync(RoleType.Admin))
        {
            await RoleManager.CreateAsync(new IdentityRole(RoleType.Admin));
            await RoleManager.CreateAsync(new IdentityRole(RoleType.Customer));
        }
        if (Input.Role is not null)
        {
            await UserManager.AddToRoleAsync(user, Input.Role);
        }
        else
        {
            await UserManager.AddToRoleAsync(user, RoleType.Customer);
        }

        var userId = await UserManager.GetUserIdAsync(user);
        if (Input.Role == RoleType.Customer || string.IsNullOrEmpty(Input.Role))
        {
            await _publisher.Publish(new UserRegisteredEvent(userId, user.Email, user.FirstName, user.LastName), CancellationToken.None);
        }
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [ComparePasswords(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";

       
        public string? Role { get; set; }
        [Required]
        public string? FirstName { get; set; } = "";
        [Required]
        public string? LastName { get; set; } = ""; 
    }
}
