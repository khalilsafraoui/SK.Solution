@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SK.Solution.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <div class="text-center">
        <p>or log in with:</p>
        <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div>
                @foreach (var provider in externalLogins)
                {
                    var iconClass = provider.Name switch
                    {
                        "Google" => "fab fa-google",
                        "Microsoft" => "fab fa-microsoft",
                        _ => "fas fa-user" // fallback
                    };

                    <button type="submit" class="btn btn-link btn-floating mx-1"
                            name="provider" value="@provider.Name"
                            title="Log in using your @provider.DisplayName account">
                        <i class="@iconClass fa-2x"></i>
                    </button>
                }
            </div>
        </form>
    </div>
   
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
