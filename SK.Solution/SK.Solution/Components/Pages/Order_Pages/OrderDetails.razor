@page "/order/details/{id:int}"
@using SK.Solution.Utility
@rendermode InteractiveServer
@inject IOrderRepository _OrderRepository
@inject NavigationManager _NavigationManager
@inject IJSRuntime _JSRuntime
@inject AuthenticationStateProvider _AuthenticationStateProvider

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id: @order.Id</p>
                <p>Name: @order.Name</p>
                <p>Email: @order.Email</p>
                <p>Phone: @order.PhoneNumber</p>
                <p>Order Status: @order.Status </p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>

                @foreach(var orderDetails in order.OrderDetails)
                {
                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                            <p>
                                &nbsp;@orderDetails.ProductName
                            </p>
                            <p>
                                @orderDetails.Price.ToString("C",CultureInfo.GetCultureInfo("en-us")) x @orderDetails.Quantity = 
                            </p>
                        </div>
                        <div class="ps-4">
                            @((orderDetails.Price * orderDetails.Quantity).ToString("C",CultureInfo.GetCultureInfo("en-us")))
                        </div>

                    </div>
                }



                <hr />
                <h4 class="text-success text-end">
                    @order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <a href="order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</a>
                    </div>
                    <div class="col-7 text-end">
                        @if (order.Status != OrderStatus.StatusCancelled && order.Status != OrderStatus.StatusCompleted && IsAdmin == true)
                        {
                            <button class="btn btn-danger m-2 p-2" style="width:150px;" @onclick="()=>UpdateOrderStatus(OrderStatus.StatusCancelled)">Cancelled</button>
                            @if (order.Status == OrderStatus.StatusPending)
                            {
                                <button class="btn btn-primary m-2 p-2" style="width:150px;" @onclick="()=>UpdateOrderStatus(OrderStatus.StatusReadyForPickUp)">Ready for Pickup</button>
                            }
                            @if (order.Status == OrderStatus.StatusReadyForPickUp)
                            {
                                <button class="btn btn-success m-2 p-2" style="width:150px;" @onclick="()=>UpdateOrderStatus(OrderStatus.StatusCompleted)">Completed</button>
                            }
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code{
    [Parameter]
    public int id { get; set; }
    private Order order = new Order();
    private bool IsProcessing{ get; set; } = true;

    private bool? IsAdmin { get; set; } = false;
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await _OrderRepository.GetByIdAsync(id);
            await CheckAuthorization();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UpdateOrderStatus(string status)
    {
        await _OrderRepository.UpdateStatusAsync(order.Id,status);
        await _JSRuntime.ToastrSuccess("Order Status Updated Successfully");
        StateHasChanged();
    }

    private async Task CheckAuthorization()
    {
        if (authenticationStateTask is not null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            IsAdmin = user?.IsInRole(RoleType.Admin);
        }
    }
}

