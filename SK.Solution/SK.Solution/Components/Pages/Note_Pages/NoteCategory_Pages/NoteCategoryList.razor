@page "/notecategory"
@using Microsoft.AspNetCore.Authorization
@using SK.Solution.Data.Entities.NoteManagment
@rendermode InteractiveServer
@inject INoteCategoryRepository _INoteCategoryRepository
@inject IJSRuntime _IJSRuntime
@inject AuthenticationStateProvider _AuthenticationStateProvider
@attribute [Authorize]
<PageTitle>Note Categories</PageTitle>

<BsModal OnModalConfirmation="ConfirmDelete_Click"
    ButtonBootsrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to delete this Category?">
</BsModal>
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> Note Categories</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/notecategory/create" class="btn btn-lg btn-secondary" style="width:250px"><i class="bi bi-plus-square"></i> Add New Category</a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Display Ordre</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var cat in Categories)
                        {
                            <tr>
                                <td> @cat.Id</td>
                                <td> @cat.Name</td>
                                <td> @cat.DisplayOrdre</td>
                                <td>
                                    <a href="@($"/notecategory/update/{cat.Id}")" class="btn btn-primary"> <i class="bi bi-pencil-square"></i> Edit</a>
                                    <button class="btn btn-danger" @onclick="()=>HandleDelete(cat.Id)"> <i class="bi bi-trash3"></i> Delete</button>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            }
        </div>

    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<NoteCategory> Categories { get; set; } = new List<NoteCategory>();
    private int DeleteCategoryID { get; set; } = 0;
    private string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        Categories = await _INoteCategoryRepository.GetCategoriesAsync(UserId);
    }

    private async Task HandleDelete(int id)
    {
        DeleteCategoryID = id;
        await _IJSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _IJSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if(isConfirmed && DeleteCategoryID != 0)
        {
            var result = await _INoteCategoryRepository.DeleteAsync(DeleteCategoryID);
            if(result)
            {
                await _IJSRuntime.ToastrSuccess("Category Delete Successfully");
            }
            else
            {
                await _IJSRuntime.ToastrError("Category Delete InSuccessfully");
            }
            await LoadCategories();
           
        }
        DeleteCategoryID = 0;
        IsProcessing = false;
    }
}
