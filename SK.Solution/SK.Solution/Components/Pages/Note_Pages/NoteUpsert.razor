@page "/note/create"
@page "/note/update/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using SK.Solution.Data.Entities.NoteManagment
@rendermode InteractiveServer
@inject INoteCategoryRepository _INoteCategoryRepository1
@inject INoteRepository _INoteRepository
@inject NavigationManager _NavigationManager
@inject IJSRuntime _IJSRuntime
@inject AuthenticationStateProvider _AuthenticationStateProvider
@attribute [Authorize]
<PageTitle>@(Id > 0 ? "Edit" : "Add") Note</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> @(Id>0? "Edit":"Add") Note</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm Model="note" FormName="ProductUpsertForm" OnValidSubmit="UpsertNote">
                <DataAnnotationsValidator/>
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="note.Title" class="form-control" id="Name" DisplayName="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(()=> note.Title)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <label for="Description">Description</label>
                        <RadzenHtmlEditor @bind-Value=note.Description style="height: 450px;" UploadUrl="upload/image" />
                        <ValidationMessage For="@(()=> note.Description)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <label for="DescriptionEn">Description En</label>
                        <RadzenHtmlEditor @bind-Value=note.DescriptionEn style="height: 450px;" UploadUrl="upload/image" />
                        <ValidationMessage For="@(()=> note.DescriptionEn)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="note.DisplayOrdre" class="form-control" id="DisplayOrdre" DisplayName="DisplayOrdre" />
                        <label for="DisplayOrdre">DisplayOrdre</label>
                        <ValidationMessage For="@(()=> note.DisplayOrdre)" />
                    </div>
                  
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="note.CategoryId" class="form-select" id="category" DisplayName="category">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var cat in _categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(()=> note.CategoryId)" />
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-save"></i> Save
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="note/list" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>

    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private bool IsProcessing { get; set; } = true;

    private string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
       
        UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    [SupplyParameterFromForm(FormName = "NoteUpsertForm")]
    private Note note { get; set; } = new Note();

    private IEnumerable<NoteCategory> _categories { get; set; } = new List<NoteCategory>();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await LoadNoteAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadNoteAndCategoryList()
    {
        if (Id > 0)
        {
            note = await _INoteRepository.GetNoteAsync(Id);
        }
        _categories = await _INoteCategoryRepository1.GetCategoriesAsync(UserId);
    }

    private async Task UpsertNote()
    {
        IsProcessing = true;
        if(note.Id > 0)
        {
            await _INoteRepository.UpdateAsync(note);
            await _IJSRuntime.ToastrSuccess("Note Updated Successfully");
        }
        else
        {
            note.UserId = UserId;
            await _INoteRepository.CreateAsync(note);
            await _IJSRuntime.ToastrSuccess("Note Created Successfully");
        }
        IsProcessing = false;
    }
    
}
