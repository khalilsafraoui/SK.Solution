@page "/cart"
@using Microsoft.AspNetCore.Authorization
@using SK.Solution.Utility
@rendermode InteractiveServer
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject IShoppingCartRepository ShoppingCartRepository;
@inject IOrderRepository OrderRepository;
@inject NavigationManager _NavigationManager
@attribute [Authorize]
<PageTitle>Cart</PageTitle>
@if (IsProcessing)
{
	<div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/loading.gif" alt="loading">
	</div>
}
else
{
	@if(shoppingCarts.Any())
	{
		<div class="row w-100">
			<div class="col-lg-6 col-12">
				<div class="container p-4 m-2">
					<h4 class="text-center text-success display-6">
						Cart Summary
					</h4>

					@foreach (var cartItem in shoppingCarts)
					{
						<div class="d-flex p-2 m-2">
							<div class="card flex-row w-100">
								<img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl?? "/images/default.png")">
								<div class="card-body">
									<div class="d-flex justify-content-between align-items-center">
										<h4 class="">
											@cartItem.Product.Name
										</h4>
										<h4>
											@cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
										</h4>
									</div>
									<div class="flex-fill">
										<h4 class="text-danger">
											@((cartItem.Product.Price * cartItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
										</h4>
									</div>
									<div class="d-flex justify-content-between align-items-center">
										<div class="d-flex justify-content-between g-0">
											<span @onclick="()=>UpdateOrderItem(cartItem.ProductId,-1)">
												<i class="bi bi-dash-circle-fill btn text-secondary"></i>
											</span>
											<span class="ml-1 me-1">
												<b class="lead">@cartItem.Count</b>
											</span>
											<span @onclick="()=>UpdateOrderItem(cartItem.ProductId,1)">
												<i class="bi bi-plus-circle-fill btn text-secondary"></i>
											</span>
										</div>
										<button class="btn btn-danger" @onclick="()=>UpdateOrderItem(cartItem.ProductId,-cartItem.Count)">Remove</button>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			<div class="col-lg-6 col-12 p-4">
				<div class="card">
					<div class="card-header text-success text-center display-6">
						Pickup Details
					</div>
					<EditForm Model="order" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
						<DataAnnotationsValidator />
						<div class="card-body">

							<div class="card-body">
								<div class="form-group">
									<label>Name</label>
									<InputText @bind-Value="order.Name" type="text" class="form-control" />
									<ValidationMessage For="@(() => order.Name)" />
								</div>
								<div class="form-group">
									<label>Email</label>
									<InputText @bind-Value="order.Email" type="text" class="form-control" />
									<ValidationMessage For="@(() => order.Email)" />
								</div>
								<div class="form-group">
									<label>Phone</label>
									<InputText @bind-Value="order.PhoneNumber" type="text" class="form-control" />
									<ValidationMessage For="@(() => order.PhoneNumber)" />
								</div>
							</div>

							<div class="card mt-4 bg-light">
								<div class="card-body">
									<h4>
										Grand Total: @order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
									</h4>
									<h4>
										No. of Items: @TotalItems
									</h4>
								</div>

							</div>
						</div>

						<button type="submit" class="btn btn-success m-4">
							Looks Good? Place Order!
						</button>
					</EditForm>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="p-4">
			<div class="alert alert-warning">
				Your cart is Empty! add items to cart.
			</div>
		</div>
	}
}

@code {

	private IEnumerable<ShoppingCart> shoppingCarts = new List<ShoppingCart>();

	[SupplyParameterFromForm]
	public Order order { get; set; } = new Order();

	private int TotalItems { get; set; } = 0;
	private bool IsProcessing { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		order.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
		order.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		order.Status = OrderStatus.StatusPending;	
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadShoppingCart();
			IsProcessing = false;
			StateHasChanged();
		}
	}

	private async Task LoadShoppingCart()
	{
		shoppingCarts = await ShoppingCartRepository.GetAllAsync(order.UserId);
		order.OrderTotal = 0;
		TotalItems = 0;
		foreach (var cart in shoppingCarts)
		{
            order.OrderTotal += (Convert.ToDouble(cart.Product.Price) * cart.Count);
            TotalItems += cart.Count;
		}
        order.OrderTotal = Math.Round(order.OrderTotal, 2);
	}

	private async Task UpdateOrderItem(int productId, int updateBy)
	{
		//add product to cart
		var cart = await ShoppingCartRepository.UpdateCartAsync(order.UserId, productId, updateBy);
		await LoadShoppingCart();

	}

	private async Task ProcessOrderCreation()
	{
        IsProcessing = true;
        await Task.Yield();
        order.OrderDetails = OrderServices.ConvertShoppingCartListToOrderDetails(shoppingCarts.ToList());
        var result = await OrderRepository.CreateAsync(order);
        if (result != null)
        {
            await ShoppingCartRepository.ClearCartAsync(order.UserId);
            _NavigationManager.NavigateTo($"/order/confirmation/{result.Id}");
        }
	}

}
