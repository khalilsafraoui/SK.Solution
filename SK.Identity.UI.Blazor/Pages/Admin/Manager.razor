@attribute [Route(Routes.Identity_Manager)]
@attribute [Authorize(Roles = RoleType.Admin)]
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _IJSRuntime
@inject ILogger<Manager> Logger
@rendermode InteractiveServer

<div class="container my-5">
    <h2 class="mb-4 text-center">User Management</h2>

    @if (manager == null)
    {
        <div class="text-center my-5">
            <p class="text-muted">No manager found.</p>
            <button class="btn btn-lg btn-primary" @onclick="AddUser">
                <i class="bi bi-plus-circle me-2"></i> Create Manager
            </button>
        </div>
    }
    else
    {
        <div class="card shadow-sm mx-auto" style="max-width: 500px;">
            <div class="card-body">
                <h5 class="card-title">Manager Details</h5>
                <p class="card-text mb-1">
                    <strong>Email:</strong> @manager.Email
                </p>
                <p class="card-text mb-2">
                    <strong>Roles:</strong>
                    @foreach (var role in manager.Roles)
                    {
                        <span class="badge bg-primary me-1">@role</span>
                    }
                </p>
                <button class="btn btn-outline-primary w-100" @onclick="() => EditManager(manager.UserId)">
                    <i class="bi bi-pencil me-1"></i> Manage Roles
                </button>
            </div>
        </div>
    }
</div>

@code {
    private UserDto? manager;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var query = new GetManagerQuery();
                var result = await Mediator.Send(query);
                if (result.IsSuccess)
                {
                    manager = result.Manager;
                }
                else
                {
                    await _IJSRuntime.ToastrError(result.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while Retriving the Manager.");
                await _IJSRuntime.ToastrError("An unexpected error occurred while Retriving the Manager. Please try again.");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private void AddUser() => NavigationManager.NavigateTo(Routes.Identity_Manager_Create);

    private void EditManager(string managerId) => NavigationManager.NavigateTo(Routes.GetManagerRolesEditUrl(managerId));
}
