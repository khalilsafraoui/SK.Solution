@inject IVisitPlanningServices visitPlanningServices
@inject IJSRuntime JS
<div class="card shadow rounded p-3  w-100 h-100" style="max-width: 400px; height: 90vh; overflow-y: auto;background: #f5f7ff;" >
    <h5 class="card-title">Items</h5>

    <div class="input-group mb-3">
        <span class="input-group-text"><i class="bi bi-search"></i></span>
        <input type="text" class="form-control" placeholder="Search..." @bind="searchText" />
    </div>

    <div class="btn-group mb-3" role="group" aria-label="Filter buttons">
        <button @onclick="()=>SetFilter(FilterType.All)" type="button" class="@GetButtonClass(FilterType.All)">All</button>
        <button @onclick="()=>SetFilter(FilterType.Customers)" type="button" class="@GetButtonClass(FilterType.Customers)">Customers</button>
        <button @onclick="()=>SetFilter(FilterType.Orders)" type="button" class="@GetButtonClass(FilterType.Orders)">Orders</button>
    </div>

    @* Advanced Filter Toggle Button *@
    <button class="btn btn-outline-secondary mb-3" @onclick="ToggleAdvancedFilter">
        @(showAdvancedFilter ? "Hide Advanced Filters" : "Advanced Filters")
    </button>

    @* Advanced Filter Panel *@
    @if (showAdvancedFilter)
    {
        <div style="min-height: 300px; max-height: 1000px; overflow-y: auto;">
        <div class="card card-body mb-3 border border-primary">
            <div class="mb-2">
                <label>Country:</label>
                <select class="form-select" @bind="selectedCountry">
                    <option value="">All</option>
                        @foreach (var country in visitPlanningServices.GetCountries())
                    {
                        <option value="@country._key">@country._value</option>
                    }
                </select>
            </div>

            <div class="mb-2">
                <label>State:</label>
                <select class="form-select" @bind="selectedState">
                    <option value="">All</option>
                        @foreach (var state in visitPlanningServices.GetStates())
                    {
                            <option value="@state._key">@state._value</option>
                    }
                </select>
            </div>

                <div class="mb-2">
                    <label>City:</label>
                    <select class="form-select" @bind="selectedCity">
                        <option value="">All</option>
                        @foreach (var city in visitPlanningServices.GetCities())
                        {
                            <option value="@city._key">@city._value</option>
                        }
                    </select>
                </div>

            <button class="btn btn-primary mt-2" @onclick="ApplyAdvancedFilter">Apply Filters</button>
        </div>
        </div>
    }else{
    <div style="min-height: 300px; max-height: 1000px; overflow-y: auto;">
            <Dropzone TItem="DestinationDto" Items="@FiltredDestinations.ToList()" AllowsDrag='(d)=>d.IsSelected == false || (d.IsSelected && !d.IsDelevery)' Accepts='(d, t)=>d.Name == "No Drop Accepted"'>

        <div class="card mb-3 shadow-sm border-0">
            <div class="card-body p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <strong>@context.Name</strong>

                    <div class="d-flex align-items-center gap-2">
                        <!-- Icon Button to Add Mark in Google Maps -->
                        @if (context.Mark is not null)
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Add mark on Google Maps" @onclick="() => AddMapMark(context)">
                                <i class="bi bi-geo-alt-fill"></i>
                            </button>
                        }
                        <span class="@GetBadgeClass(context.Priority)">@context.Priority</span>

                        
                       
                    </div>
                </div>

                <div class="text-muted small">@context.Address</div>
                <div class="text-muted small">@context.Phone</div>
                <div class="text-muted small">
                    (@(context.IsDelevery ? context.TotalVisitPlanned + " / 1) Delivery" : context.TotalVisitPlanned + ") Visite(s)") Planned
                </div>
            </div>

        </div>

    </Dropzone>
    </div>}
</div>

@code {

    public enum FilterType
    {
        All,
        Customers,
        Orders
    }
    private string searchText = "";

    [CascadingParameter]
    public List<DestinationDto> Destinations { get; set; } = new();

    private string GetBadgeClass(string priority) => priority switch
    {
        "High" => "badge bg-danger-subtle text-danger-emphasis",
        "Medium" => "badge bg-warning-subtle text-warning-emphasis",
        "Low" => "badge bg-success-subtle text-success-emphasis",
        _ => "badge bg-secondary"
    };

    public IEnumerable<DestinationDto> FiltredDestinations =>
     Destinations
         .Where(d =>
             // Filter type
             (selectedFilter == FilterType.All ||
              (selectedFilter == FilterType.Orders && d.IsDelevery) ||
              (selectedFilter == FilterType.Customers && !d.IsDelevery)) &&

             // Search text
             (string.IsNullOrWhiteSpace(searchText) ||
              d.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
              d.Address.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&

             // Country filter
             (string.IsNullOrWhiteSpace(selectedCountry) || d.CountryId == selectedCountry) &&

             // State filter
             (string.IsNullOrWhiteSpace(selectedState) || d.StateId == selectedState) &&

             // City filter
             (string.IsNullOrWhiteSpace(selectedCity) || d.CityId == selectedCity)
         );

    private FilterType selectedFilter = FilterType.All;

    private void SetFilter(FilterType filter)
    {
        selectedFilter = filter;
    }

    private string GetButtonClass(FilterType filter)
    {
        var isActive = selectedFilter == filter;
        var baseClass =  "btn btn-outline-primary btn-sm";
        return isActive ? $"{baseClass} active" : baseClass;
    }

    private bool showAdvancedFilter = false;
    private string selectedCountry = "";
    private string selectedState = "";
    private string selectedCity = "";

    private void ToggleAdvancedFilter()
    {
        showAdvancedFilter = !showAdvancedFilter;
    }

    private void ApplyAdvancedFilter()
    {
        // Re-apply filtering logic (if you're using manual filtering)
        SetFilter(selectedFilter); // reuse your existing logic
        showAdvancedFilter = false;
    }
    List<MarkDto> marks = new List<MarkDto>();
    private async Task AddMapMark(DestinationDto context)
    {
        // Check if the mark already exists
        if (context.Mark is not null)
        {
            marks.Clear();
            marks.Add(context.Mark);
            await JS.GoogleMap_ClearMarkers();
            await JS.GoogleMap_AddMarkers(marks);
        }
    }
}
