@using Microsoft.Extensions.Localization
@using SK.CRM.UI.Blazor.Resources
@attribute [Route(Routes.Crm_Cart)]

@rendermode InteractiveServer
@inject IMediator Mediator
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject PaymentService _PaymentService
@inject IMapper _mapper
@inject IPublisher _publisher
@inject ISharedUserServices _ShareUserServices
@attribute [Authorize]
@inject IStringLocalizer<CrmTextRessources> _localizer
<PageTitle>@_localizer["Cart"]</PageTitle>
@if (IsOrderProcessing)
{
    <_CartToOrder customerGeneralInformationsDto=@customerGeneralInformationsDto Email=@Email UserId=@UserId shoppingCarts=@shoppingCarts Reload="ReloadShoppingCart"></_CartToOrder>
}
else
{
    <_CartToQuote customerGeneralInformationsDto=@customerGeneralInformationsDto Email=@Email UserId=@UserId shoppingCarts=@shoppingCarts Reload="ReloadShoppingCart"></_CartToQuote>
}


@code {



    private bool IsOrderProcessing { get; set; } = true;
    private bool IsProcessing { get; set; } = true;
    public CustomerGeneralInformationsDto customerGeneralInformationsDto { get; set; } = new();
    public string UserId { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public  IEnumerable<ShoppingCartDto> shoppingCarts = new List<ShoppingCartDto>();
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetCurrentUserInformations();
            await GetCustomer();
            await LoadShoppingCart();
            StateHasChanged();
        }
    }

    private async Task GetCurrentUserInformations()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    private async Task GetCustomer()
    {
        var query = new GetCustomerByUserIdQuery(UserId);
        customerGeneralInformationsDto = await Mediator.Send(query);
        if (customerGeneralInformationsDto is null)
        {
            await CreateCustomer();
            customerGeneralInformationsDto = await Mediator.Send(query);
        }
    }

    private async Task CreateCustomer()
    {
        var userInfo = await _ShareUserServices.GetUserByIdAsync(UserId);
        await _publisher.Publish(new UserRegisteredEvent(userInfo.UserId, userInfo.Email, userInfo.FirstName, userInfo.LastName), CancellationToken.None);
    }

    private async Task LoadShoppingCart()
    {
        var query = new GetShoppingCartsQuery(UserId);
        shoppingCarts = await Mediator.Send(query);
        foreach (var cart in shoppingCarts)
        {
            var queryProductById = new GetProductByIdQuery(cart.ProductId);
            cart.Product = _mapper.Map<ProductDto>(await Mediator.Send(queryProductById));
            cart.newCount = cart.Count;
        }
        shoppingCarts = shoppingCarts.OrderBy(c => c.Product.Name).ToList();
    }

    private async Task ReloadShoppingCart()
    {
        await LoadShoppingCart();
        StateHasChanged();
    }
}
