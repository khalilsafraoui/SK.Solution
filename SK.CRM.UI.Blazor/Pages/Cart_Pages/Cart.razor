@attribute [Route(Routes.Crm_Cart)]

@rendermode InteractiveServer
@inject IMediator Mediator
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject PaymentService _PaymentService
@inject IMapper _mapper
@inject IPublisher _publisher
@inject ISharedUserServices _ShareUserServices
@attribute [Authorize]
<PageTitle>Cart</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{


    <style>
        .background-radial-gradient {
        background-color: hsl(218, 41%, 15%);
        background-image: radial-gradient(650px circle at 0% 0%, hsl(218, 41%, 35%) 15%, hsl(218, 41%, 30%) 35%, hsl(218, 41%, 20%) 75%, hsl(218, 41%, 19%) 80%, transparent 100%), radial-gradient(1250px circle at 100% 100%, hsl(218, 41%, 45%) 15%, hsl(218, 41%, 30%) 35%, hsl(218, 41%, 20%) 75%, hsl(218, 41%, 19%) 80%, transparent 100%);
        }

        .bg-glass {
        background-color: hsla(0, 0%, 100%, 0.9) !important;
        backdrop-filter: saturate(200%) blur(25px);
        }

        .full-height {
        height: 100vh;
        }

        .mb-5 {
        margin-top: 5rem;
        margin-bottom: 3rem !important;
        }


    </style>


    <section class="background-radial-gradient overflow-auto">
        <div class="container d-flex justify-content-center align-items-center full-height px-4 py-5 px-md-5 text-center text-lg-start">
            <div class="row gx-lg-5 align-items-center mb-5 w-100 flex-column flex-lg-row">
                <div class="col-lg-6 mb-5 mb-lg-0" >
                    <h1 class="my-5 display-5 fw-bold" style="color: hsl(218, 81%, 95%)">
                        your cart is just waiting <br />
                        <span style="color: hsl(218, 81%, 75%)">to make your day better.</span>
                    </h1>
                    <p class="mb-4 opacity-70" style="color: hsl(218, 81%, 85%)">
                        You're almost there! Review your selected items and head to checkout when you're ready
                    </p>
                </div>

                <div class="col-lg-6 scroll-container">
                    @if (shoppingCarts.Any())
                    {
                        <RadzenSteps SelectedIndex="@CurrentStep" Change="@(index => CurrentStep = index)" ShowStepsButtons="false">
                            <RadzenStepsItem Text="Cart Summary"></RadzenStepsItem>
                            <RadzenStepsItem Text="User Details"></RadzenStepsItem>
                            <RadzenStepsItem Text="User Address"></RadzenStepsItem>
                            <RadzenStepsItem Text="Payment & Delivery"></RadzenStepsItem>
                        </RadzenSteps>

                        @if (CurrentStep == 0)
                        {
                            <RadzenCard Class="p-4 m-2 shadow radzen-card-responsive">
                                <h4 class="text-center text-success display-6">Cart Summary</h4>
                                <div class="card-body overflow-auto" style="max-height: 500px;">
                                    @foreach (var cartItem in shoppingCarts)
                                    {
                                        <RadzenCard @key="cartItem.ProductId" Class="d-flex flex-row align-items-center w-100 shadow-sm p-3 my-2   radzen-card-responsive">
                                            <img class="rounded" style="width: 100px; height: 100px; object-fit: cover;"
                                            src="@(cartItem.Product?.ImageUrl ?? "/images/default.png")">
                                            <div class="card-body ms-3 w-100">
                                                <div class="d-flex justify-content-between">
                                                    <h5 class="fw-bold">@cartItem.Product?.Name</h5>
                                                    @*  <h5 class="text-primary">@cartItem.Product?.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</h5> *@
                                                </div>
                                                <h4 class="text-danger fw-bold">
                                                    @((cartItem.Product?.Price * cartItem.Count)?.ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                                </h4>
                                                <div >
                                                    <div class="row">
                                                        <div class="col-6">
                                                            <!-- Sets width to 4/12 of the row -->
                                                            <RadzenNumeric Value="@cartItem.Count" Min="1" Max="100"
                                                            ValueChanged="@((int value) => UpdateOrderItem(cartItem.ProductId, value - cartItem.Count))" />
                                                        </div>
                                                    </div>

                                                    <div class="row mt-3">
                                                        <div class="col-4">
                                                            <RadzenButton Text="Remove" Click="() => UpdateOrderItem(cartItem.ProductId, -cartItem.Count)"
                                                            ButtonStyle="ButtonStyle.Danger" />
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </RadzenCard>
                                    }

                                    <!-- Grand Total Section -->
                                    <div class="border-top pt-3 mt-3">
                                        <h4 class="text-center fw-bold">
                                            Total:
                                            <span class="text-success">@order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))</span>
                                        </h4>
                                    </div>

                                    <div class="text-center">
                                        <RadzenButton Text="Proceed to checkout ❯" Click="NextStep" ButtonStyle="ButtonStyle.Primary" Class="m-4 px-4 fw-bold" />
                                    </div>
                                </div>
                            </RadzenCard>
                        }

                        @if (CurrentStep == 1)
                        {
                            <RadzenCard Class="shadow-lg p-4 radzen-card-responsive">
                                <h4 class="text-center text-success fw-bold display-6">Pickup Details</h4>

                                <EditForm FormName="CartForm" OnValidSubmit="NextStep" EditContext="@editContext">
                                    <DataAnnotationsValidator />

                                    <div class="card-body">
                                        <div class="form-floating py-3 col-12">
                                            <InputText @bind-Value="order.Email" class="form-control" id="Email" DisplayName="Email Address" />
                                            <label for="Email">Email Address</label>
                                            <ValidationMessage For="@(()=> order.Email)" />
                                        </div>

                                        <div class="form-floating py-3 col-12">
                                            <InputText @bind-Value="order.Name" class="form-control" id="Name" DisplayName="Full Name" />
                                            <label for="Name">Full Name</label>
                                            <ValidationMessage For="@(()=> order.Name)" />
                                        </div>

                                        <div class="form-floating py-3 col-12">
                                            <InputText @bind-Value="order.PhoneNumber" class="form-control" id="Email" DisplayName="Phone Number" />
                                            <label for="PhoneNumber">Phone Number</label>
                                            <ValidationMessage For="@(()=> order.PhoneNumber)" />
                                        </div>

                                        @*  <div class="mb-3">
                                            <RadzenLabel Text="Delivery Method" />
                                            <RadzenRadioButtonList TValue="string" @bind-Value="order.PhoneNumber"
                                                                   Data="@DeliveryMethod"
                                                                   Class="w-100" />
                                        </div>

                                        <div class="mb-3">
                                            <RadzenLabel Text="Payment Method" />
                                            <RadzenRadioButtonList @bind-Value="order.PhoneNumber" Data="@PaymentMethod" />
                                        </div> *@
                                    </div>

                                    <div class="d-flex justify-content-between mt-3">
                                        <RadzenButton Text="❮ Previous" Click="PreviousStep" ButtonStyle="ButtonStyle.Secondary" Class="px-4 py-2 fw-bold rounded" />
                                        <RadzenButton Text="Next ❯" Click="NextStep" ButtonStyle="ButtonStyle.Primary" Class="px-4 py-2 fw-bold rounded" />
                                    </div>
                                </EditForm>
                            </RadzenCard>
                        }

                        @if(CurrentStep == 2)
                        {
                            <RadzenCard Class="shadow-lg p-4 radzen-card-responsive">
                                <h4 class="text-center text-success fw-bold display-6">Address</h4>
                                <_CartAddress CustomerId=@order.CustomerId.ToString() @bind-AddressId=@order.AddressId></_CartAddress>

                                <div class="d-flex justify-content-between mt-3">
                                    <RadzenButton Text="❮ Previous" Click="PreviousStep" ButtonStyle="ButtonStyle.Secondary" Class="px-4 py-2 fw-bold rounded" />
                                    <RadzenButton Text="Next ❯" Click="NextStep" ButtonStyle="ButtonStyle.Primary" Class="px-4 py-2 fw-bold rounded" />
                                </div>

                            </RadzenCard>
                        }

                        @if (CurrentStep == 3)
                        {
                            <RadzenCard Class="shadow radzen-card-responsive">
                                <div class="card-header text-success text-center display-6">Payment & Delivery</div>
                                <div class="card mt-4 bg-light p-3">
                                    <h4>Grand Total: @order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))</h4>
                                    <h4>No. of Items: @TotalItems</h4>
                                </div>
                                <RadzenButton Text="Previous" Click="PreviousStep" ButtonStyle="ButtonStyle.Secondary" Class="m-2" />
                                <RadzenButton Text="Place Order" Click="ProcessOrderCreation" ButtonStyle="ButtonStyle.Success" Class="m-4" />
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <div class="p-4">
                            <RadzenAlert Severity="Severity.Warning">Your cart is Empty! Add items to cart.</RadzenAlert>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>


}

@code {

    private IEnumerable<ShoppingCartDto> shoppingCarts = new List<ShoppingCartDto>();
    private List<string> DeliveryMethod = new List<string> { " Pickup", "Delivery" };
    private List<string> PaymentMethod = new List<string> { " Online Payment", "Cash on Delivery" };
    [SupplyParameterFromForm]
    public OrderDto order { get; set; } = new OrderDto();

    private int TotalItems { get; set; } = 0;
    private bool IsProcessing { get; set; } = true;
    private EditContext editContext;
    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        order.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        order.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        var query = new GetCustomerByUserIdQuery(order.UserId);
        var customer = await Mediator.Send(query);
        if (customer is null)
        {
            // create customer    
            var userInfo = await _ShareUserServices.GetUserByIdAsync(order.UserId);
            await _publisher.Publish(new UserRegisteredEvent(userInfo.UserId, userInfo.Email, userInfo.FirstName, userInfo.LastName), CancellationToken.None);
            customer = await Mediator.Send(query);
        }
        order.CustomerId = customer.Id;
        order.Status = OrderStatus.StatusPending;	
        editContext = new EditContext(order);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadShoppingCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadShoppingCart()
    {
        var query = new GetShoppingCartsQuery(order.UserId);
        shoppingCarts = await Mediator.Send(query);

        order.OrderTotal = 0;
        TotalItems = 0;
        foreach (var cart in shoppingCarts)
        {
            var queryProductById = new GetProductByIdQuery(cart.ProductId);
            cart.Product = _mapper.Map<ProductDto>(await Mediator.Send(queryProductById));
            order.OrderTotal += (Convert.ToDouble(cart.Product?.Price) * cart.Count);
            TotalItems += cart.Count;
        }
        order.OrderTotal = Math.Round(order.OrderTotal, 2);
        shoppingCarts = shoppingCarts.OrderBy(c => c.Product.Name).ToList();
    }

    private async Task UpdateOrderItem(int productId, int updateBy)
    {
        //add product to cart
        var command = new UpdateCartCommand(order.UserId, productId, updateBy);
        var cart = await Mediator.Send(command);

        var query = new GetTotalCartCountQuery(order.UserId);

        _SharedStateService.TotalCartCount = await Mediator.Send(query);
        await LoadShoppingCart();

    }

    private bool OnlinePaymentEnabled = false;
    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield();
        order.OrderDetails = OrderServices.ConvertShoppingCartListToOrderDetails(shoppingCarts.ToList());

        if (OnlinePaymentEnabled)
        {
            var session = _PaymentService.CreateStripeCheckoutSession(order);
            order.SessionId = session.Id;
            var command = new CreateOrderCommand(order);
            var result = await Mediator.Send(command);

            _NavigationManager.NavigateTo(session.Url);
        }
        else
        {
            var command = new CreateOrderCommand(order);
            var result = await Mediator.Send(command);
            
            _NavigationManager.NavigateTo(Routes.GetOrderConfirmedUrl(result.Id, result.UserId));
            

        }




    }
    private int CurrentStep = 0;
    private async void NextStep()
    {
        var isValid = editContext.Validate();

        var id = order.PhoneNumber;
        if (isValid)
        {
            if (CurrentStep < 3) CurrentStep++;
        }
    }

    private void PreviousStep()
    {
        if (CurrentStep > 0) CurrentStep--;
    }
}
