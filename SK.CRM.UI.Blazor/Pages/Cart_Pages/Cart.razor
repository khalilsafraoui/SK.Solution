@page "/cartV2"
@using AutoMapper
@using SK.CRM.Application.Dtos
@using SK.Inventory.Application.Features.Products.Queries


@rendermode InteractiveServer
@inject IMediator Mediator
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager
@inject SharedStateService _SharedStateService
@inject PaymentService _PaymentService
@inject IMapper _mapper
@attribute [Authorize]
<PageTitle>Cart</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    @if (shoppingCarts.Any())
    {


        <div class="d-flex flex-column align-items-center">

            <RadzenSteps SelectedIndex="@CurrentStep" Change="@(index => CurrentStep = index)" ShowStepsButtons="false">
                <RadzenStepsItem Text="Cart Summary"></RadzenStepsItem>
                <RadzenStepsItem Text="User Details"></RadzenStepsItem>
                <RadzenStepsItem Text="Payment & Delivery"></RadzenStepsItem>
            </RadzenSteps>

            @if (CurrentStep == 0)
            {
                <div class="d-flex justify-content-center w-100">
                    <div class="col-lg-6 col-12">
                        <RadzenCard Class="p-4 m-2 shadow">
                            <h4 class="text-center text-success display-6">Cart Summary</h4>

                            @foreach (var cartItem in shoppingCarts)
                            {
                                <RadzenCard Class="d-flex flex-row align-items-center w-100 shadow-sm p-3 my-2">
                                    <img class="rounded" style="width: 100px; height: 100px; object-fit: cover;"
                                    src="@(cartItem.Product?.ImageUrl ?? "/images/default.png")">
                                    <div class="card-body ms-3 w-100">
                                        <div class="d-flex justify-content-between">
                                            <h5 class="fw-bold">@cartItem.Product?.Name</h5>
                                            <h5 class="text-primary">@cartItem.Product?.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</h5>
                                        </div>
                                        <h4 class="text-danger fw-bold">
                                            @((cartItem.Product?.Price * cartItem.Count)?.ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                        </h4>
                                        <div class="d-flex justify-content-between align-items-center mt-2">
                                            <RadzenNumeric Value="@cartItem.Count" Min="1" Max="100"
                                            ValueChanged="@((int value) => UpdateOrderItem(cartItem.ProductId, value - cartItem.Count))" />
                                            <RadzenButton Text="Remove" Click="() => UpdateOrderItem(cartItem.ProductId, -cartItem.Count)"
                                            ButtonStyle="ButtonStyle.Danger" Class="ms-3" />
                                        </div>
                                    </div>
                                </RadzenCard>
                            }

                            <!-- Grand Total Section -->
                            <div class="border-top pt-3 mt-3">
                                <h4 class="text-center fw-bold">
                                    Total:
                                    <span class="text-success">@order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))</span>
                                </h4>
                            </div>

                            <div class="text-center">
                                <RadzenButton Text="Proceed to checkout ❯" Click="NextStep" ButtonStyle="ButtonStyle.Primary" Class="m-4 px-4 fw-bold" />
                            </div>
                        </RadzenCard>
                    </div>
                </div>

            }

            @if (CurrentStep == 1)
            {
                <div class="d-flex justify-content-center w-100">
                    <div class="col-lg-6 col-12 p-4">
                        <RadzenCard Class="shadow-lg p-4">
                            <h4 class="text-center text-success fw-bold display-6">Pickup Details</h4>

                            <EditForm Model="order" FormName="CartForm" OnValidSubmit="NextStep">
                                <DataAnnotationsValidator />

                                <div class="card-body">
                                    <div class="mb-3">
                                        <RadzenLabel Text="Full Name"/>
                                        <RadzenTextBox  @bind-Value="order.Name" Style="width:100%" />
                                        <ValidationMessage For="@(() => order.Name)" />
                                    </div>

                                    <div class="mb-3">
                                        <RadzenLabel Text="Email Address" />
                                        <RadzenTextBox Label="Email Address" @bind-Value="order.Email" Style="width:100%" />
                                        <ValidationMessage For="@(() => order.Email)" />
                                    </div>

                                    <div class="mb-3">
                                        <RadzenLabel Text="Phone Number" />
                                        <RadzenTextBox  @bind-Value="order.PhoneNumber" Style="width:100%" />
                                        <ValidationMessage For="@(() => order.PhoneNumber)" />
                                    </div>

                                    <!-- Pickup or Delivery Option -->
                                    <div class="mb-3">
                                        <RadzenLabel Text="Delivery Method" />
                                        <RadzenRadioButtonList TValue="string" @bind-Value="order.PhoneNumber"
                                                               Data="@DeliveryMethod"
                                        Class="w-100" />
                                    </div>

                                    <!-- Online Payment or Cash Option -->
                                    <div class="mb-3">
                                        <RadzenLabel Text="Payment Method" />
                                        <RadzenRadioButtonList @bind-Value="order.PhoneNumber" Data="@PaymentMethod" />
                                    </div>
                                </div>

                                <!-- Buttons -->
                                <div class="d-flex justify-content-between mt-3">
                                    <RadzenButton Text="❮ Previous" Click="PreviousStep" ButtonStyle="ButtonStyle.Secondary" Class="px-4 py-2 fw-bold rounded" />
                                    <RadzenButton Text="Next ❯" Click="NextStep" ButtonStyle="ButtonStyle.Primary" Class="px-4 py-2 fw-bold rounded" />
                                </div>
                            </EditForm>
                        </RadzenCard>
                    </div>
                </div>

            }

            @if (CurrentStep == 2)
            {
                <div class="d-flex justify-content-center w-100">
                    <div class="col-lg-6 col-12 p-4">
                        <RadzenCard Class="shadow">
                            <div class="card-header text-success text-center display-6">Payment & Delivery</div>
                            <div class="card mt-4 bg-light p-3">
                                <h4>Grand Total: @order.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))</h4>
                                <h4>No. of Items: @TotalItems</h4>
                            </div>
                            <RadzenButton Text="Previous" Click="PreviousStep" ButtonStyle="ButtonStyle.Secondary" Class="m-2" />
                            <RadzenButton Text="Place Order" Click="ProcessOrderCreation" ButtonStyle="ButtonStyle.Success" Class="m-4" />
                        </RadzenCard>
                    </div>
                </div>
            }

        </div>
    }
    else
    {
        <div class="p-4">
            <RadzenAlert Severity="Severity.Warning">Your cart is Empty! Add items to cart.</RadzenAlert>
        </div>
    }
}

@code {

    private IEnumerable<ShoppingCartDto> shoppingCarts = new List<ShoppingCartDto>();
    private List<string> DeliveryMethod = new List<string> { " Pickup", "Delivery" };
    private List<string> PaymentMethod = new List<string> { " Online Payment", "Cash on Delivery" };
    [SupplyParameterFromForm]
	public OrderDto order { get; set; } = new OrderDto();

	private int TotalItems { get; set; } = 0;
	private bool IsProcessing { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		order.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
		order.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		order.Status = OrderStatus.StatusPending;	
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadShoppingCart();
			IsProcessing = false;
			StateHasChanged();
		}
	}

	private async Task LoadShoppingCart()
	{
		var query = new GetShoppingCartsQuery(order.UserId);
		shoppingCarts = await Mediator.Send(query);
		
		order.OrderTotal = 0;
		TotalItems = 0;
		foreach (var cart in shoppingCarts)
		{
			var queryProductById = new GetProductByIdQuery(cart.ProductId);
			cart.Product = _mapper.Map<ProductDto>(await Mediator.Send(queryProductById));
            order.OrderTotal += (Convert.ToDouble(cart.Product?.Price) * cart.Count);
            TotalItems += cart.Count;
		}
        order.OrderTotal = Math.Round(order.OrderTotal, 2);
	}

	private async Task UpdateOrderItem(int productId, int updateBy)
	{
		//add product to cart
		var command = new UpdateCartCommand(order.UserId, productId, updateBy);
		var cart = await Mediator.Send(command);
		
		var query = new GetTotalCartCountQuery(order.UserId);
		
		_SharedStateService.TotalCartCount = await Mediator.Send(query);
		await LoadShoppingCart();

	}

	private async Task ProcessOrderCreation()
	{
        IsProcessing = true;
        await Task.Yield();
        order.OrderDetails = OrderServices.ConvertShoppingCartListToOrderDetails(shoppingCarts.ToList());
        
        var session =  _PaymentService.CreateStripeCheckoutSession(order);
        order.SessionId = session.Id;
        
		var command = new CreateOrderCommand(order);
		var result = await Mediator.Send(command);
		
        _NavigationManager.NavigateTo(session.Url);
        
	}
    private int CurrentStep = 0;
    private void NextStep()
    {
        if (CurrentStep < 2) CurrentStep++;
    }

    private void PreviousStep()
    {
        if (CurrentStep > 0) CurrentStep--;
    }
}
