@attribute [Route(Routes.Crm_Prospect_Create)]
@attribute [Route(Routes.Crm_Prospect_Edit)]
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]

@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager _NavigationManager
@inject IJSRuntime _IJSRuntime
@inject ILogger<ProspectUpsert> Logger
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="rz-m-6">
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Path=@Routes.Crm_Prospects Text="Prospects" />
            <RadzenBreadCrumbItem Icon="add" Text=@(Id != null ? "Edit" : "Add") />
        </RadzenBreadCrumb>
    </div>
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> @(Id != null ? "Edit" : "Add") Prospect</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <RadzenTabs TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Client">
                <Tabs>
                    <RadzenTabsItem Text="General Informations">
                        <_ProspectGeneralInformations ProspectId="@Id" prospect="prospect"></_ProspectGeneralInformations>

                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Addresses" Disabled="@(string.IsNullOrWhiteSpace(Id))">
                        <_ProspectAddresses ProspectId="@Id" addresses="addresses"></_ProspectAddresses>
                    </RadzenTabsItem>

                </Tabs>
            </RadzenTabs>

        </div>

    </div>
}


@code {
    [Parameter]
    public string? Id { get; set; }
    public ProspectGeneralInformationsDto prospect { get; set; } = new ProspectGeneralInformationsDto();
    private List<AddressDto> addresses { get; set; } = new List<AddressDto>();
    public bool IsProcessing { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //IsProcessing = true;
                await LoadProspect();
                await LoadAddresses();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while Loading Prospect with ID: " + Id);
                await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
            }
            finally
            {
                IsProcessing = false;
            }
        
        }
        IsProcessing = false;
    }

    private async Task LoadAddresses()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            var query = new GetProspectAddressesQuery(Guid.Parse(Id));
            addresses = await Mediator.Send(query);
        }
    }

    private async Task LoadProspect()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            var query = new GetProspectGeneralInformationsByIdQuery(Guid.Parse(Id));
            prospect = await Mediator.Send(query);
        }
    }

}
