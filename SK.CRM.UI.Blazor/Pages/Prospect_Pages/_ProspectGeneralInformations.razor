@rendermode InteractiveServer
@inject IMediator Mediator
@inject IJSRuntime _IJSRuntime
@inject NavigationManager _NavigationManager
@inject ILogger<_ProspectGeneralInformations> Logger
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">General Informations</RadzenText>
    <EditForm Model="prospect" OnValidSubmit="UpsertProspect">
        <DataAnnotationsValidator />
        <div class="border p-3 mt-4">

            <!-- Customer Fields -->
            <div class="form-floating py-3 col-12">
                <InputText @bind-Value="prospect.FirstName" class="form-control" id="FirstName" DisplayName="FirstName" />
                <label for="FirstName">FirstName</label>
                <ValidationMessage For="@(() => prospect.FirstName)" />
            </div>

            <div class="form-floating py-3 col-12">
                <InputText @bind-Value="prospect.LastName" class="form-control" id="LastName" DisplayName="LastName" />
                <label for="LastName">LastName</label>
                <ValidationMessage For="@(() => prospect.LastName)" />
            </div>

            <div class="form-floating py-3 col-12">
                <InputText @bind-Value="prospect.PhoneNumber" class="form-control" id="PhoneNumber" DisplayName="PhoneNumber" />
                <label for="PhoneNumber">PhoneNumber</label>
                <ValidationMessage For="@(()=> prospect.PhoneNumber)" />
            </div>

            <div class="form-floating py-3 col-12">
                <InputText @bind-Value="prospect.Email" class="form-control" id="Email" DisplayName="Email" />
                <label for="Email">Email</label>
                <ValidationMessage For="@(() => prospect.Email)" />
            </div>



            <!-- Submit and Back Buttons -->
            <div class="row mt-3">
                <div class="col-6 col-md-1 ms-auto">
                    <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                        <i class="bi bi-save"></i> Save
                    </button>
                </div>
            </div>


        </div>
    </EditForm>
}
@code {
    [Parameter]
    public string? ProspectId { get; set; }
    [Parameter]
    public ProspectGeneralInformationsDto prospect { get; set; } = new ProspectGeneralInformationsDto();
    public bool IsProcessing { get; set; } = false;

    private async Task UpsertProspect()
    {
        try
        {
            IsProcessing = true;
            if (prospect.Id != Guid.Empty)
            {
                var query = new UpdateProspectGeneralInformationsCommand(prospect);
                await Mediator.Send(query);
                await _IJSRuntime.ToastrSuccess("Prospect Updated Successfully");
            }
            else
            {
                var query = new CreateProspectGeneralInformationsCommand(prospect);
                prospect = await Mediator.Send(query);
                await _IJSRuntime.ToastrSuccess("Prospect Created Successfully");
                _NavigationManager.NavigateTo(Routes.GetProspectEditUrl(prospect.Id));
            }
        }
        catch (ValidationException ex)
        {
            await _IJSRuntime.ToastrError(ex.Message);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while upserting prospect");
            await _IJSRuntime.ToastrError("An error occurred while saving the prospect. Please try again.");
        }
        finally
        {
            IsProcessing = false;
        }
    }

}
