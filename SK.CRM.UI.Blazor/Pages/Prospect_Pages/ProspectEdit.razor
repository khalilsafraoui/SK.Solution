@using Microsoft.Extensions.Localization
@using SK.CRM.UI.Blazor.Resources
@attribute [Route(Routes.Crm_Prospect_Edit)]
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]
@inject IStringLocalizer<CrmTextRessources> _localizer
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager _NavigationManager
@inject IJSRuntime _IJSRuntime
@inject ILogger<ProspectEdit> Logger
<PageTitle>@_localizer["ProspectEdit_PageTitle"]</PageTitle>


<div class="container py-4">
    <div class="row justify-content-center mb-4">

        <div class="col-12 pt-1">
            <RadzenCard class="p-4 shadow radzen-card-responsive">
                <div class="row align-items-center justify-content-between">

                    <!-- Left: Title -->
                    <div class="col-12 col-md-auto mb-2 mb-md-0 text-center text-md-start">
                        <h2 class="m-0 fw-bold" style="color: purple; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
                            @_localizer["Prospect_Edit_Title"]
                        </h2>
                    </div>

                </div>
            </RadzenCard>
        </div>

        <div class="col-12 col-md-12 pt-1">
            <_Prospect_GeneralInformations prospect="prospect"></_Prospect_GeneralInformations>
        </div>

        <div class="col-12 col-md-12 pt-1">
            <_ProspectAddresses ProspectId="@Id" addresses="addresses"></_ProspectAddresses>
        </div>

        <div class="col-12 col-md-12 pt-1">
            <RadzenCard Class="p-4 shadow radzen-card-responsive">
                <div class="d-flex flex-wrap justify-content-between align-items-center">

                    <!-- Left-aligned Back button -->
                    <RadzenButton Text=@_localizer["BackToProspects"]
                                  Icon="arrow_back"
                                  Style="min-width: 160px;"
                                  ButtonStyle="ButtonStyle.Light"
                                  Click="@OnBackToProspects" />

                    <!-- Right-aligned action buttons -->
                   
                        <div class="d-flex flex-wrap gap-2 justify-content-end">

                        <RadzenButton Text=@_localizer["ConvertToCustomer"]
                                          Icon="check"
                                          Style="min-width: 120px;"
                                          ButtonStyle="ButtonStyle.Primary"
                                          Click="@OnTransformToCustomer" />

                        </div>
                   
                </div>
            </RadzenCard>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string? Id { get; set; }
    public ProspectGeneralInformationsDto prospect { get; set; } = new ProspectGeneralInformationsDto();
    private List<AddressDto> addresses { get; set; } = new List<AddressDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //IsProcessing = true;
                await LoadProspect();
                await LoadAddresses();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while Loading Prospect with ID: " + Id);
                await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
            }
            

        }
        
    }

    private async Task LoadAddresses()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            var query = new GetProspectAddressesQuery(Guid.Parse(Id));
            var result = await Mediator.Send(query);
            if (result.IsSuccess)
                addresses = result.AddressDtos;
            else
                addresses = new List<AddressDto>();
           
        }
    }

    private async Task LoadProspect()
    {
        if (!string.IsNullOrWhiteSpace(Id))
        {
            var query = new GetProspectGeneralInformationsByIdQuery(Guid.Parse(Id));
            var result = await Mediator.Send(query);
            if (result.IsSuccess)
            {
                prospect = result.ProspectGeneralInformationsDto;
            }
            else
            {
                await _IJSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Prospects);
            }
        }
    }

    void OnBackToProspects()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Prospects);
    }

    async Task OnTransformToCustomer()
    {
        var query = new ConvertToCustomerCommand(prospect,addresses);
        var result = await Mediator.Send(query);
        if (result.IsSuccess)
            await _IJSRuntime.ToastrSuccess(_localizer["Prospect_Converted_To_Customer_Success"]);
        else
            await _IJSRuntime.ToastrError(result.ErrorMessage);
    }

}
