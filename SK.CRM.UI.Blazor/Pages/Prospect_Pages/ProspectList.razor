@page "/prospectlist"

@rendermode InteractiveServer
@inject IMediator Mediator
@inject IJSRuntime _IJSRuntime
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using SK.CRM.Application.Features.Prospects.Commands
@using SK.CRM.Application.Features.Prospects.Queries
@inject NavigationManager _NavigationManager
@attribute [Authorize]

<BsModal OnModalConfirmation="ConfirmDelete_Click"
    ButtonBootsrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to Delete this Prospect?">
</BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> Prospect</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/prospect/create" class="btn btn-lg btn-secondary" style="width:250px"><i class="bi bi-plus-square"></i> Add New Prospect</a>
                </div>
            </div>
            @if (customers.Any())
            {
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@customers" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" >
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" />
                        @*  <RadzenDataGridColumn Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
                            </Template>
                        </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn Property="FirstName" Title="First Name" Width="120px" />
                        <RadzenDataGridColumn Property="LastName" Title="Last Name" Width="120px" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="160px" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="customer">
                                <RadzenButton Shade="Shade.Lighter" Text="Edit" ButtonStyle="ButtonStyle.Primary" Click="@(()=>_NavigationManager.NavigateTo($"/prospect/update/{customer.Id}"))" />
                                <RadzenButton Shade="Shade.Lighter" Text="Delete" ButtonStyle="ButtonStyle.Danger" Click="()=>HandleDelete(customer.Id)" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </div>

    </div>
}
@code {
    public bool IsProcessing { get; set; } = true;
    private List<CustomerDto>? customers;
    private Guid DeleteProspectID { get; set; } = Guid.Empty;
    // OnInitializedAsync is called when the page is initialized
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Sending GetAllCustomersQuery to the mediator
                await LoadProspects();
                IsProcessing = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                // Handle any errors that may occur
                Console.WriteLine($"Error fetching customers: {ex.Message}");
            }
           
        }
    }

    private async Task LoadProspects()
    {
        var query = new GetAllProspectsQuery();
        customers = await Mediator.Send(query);
    }
    private async Task HandleDelete(Guid id)
    {
        DeleteProspectID = id;
        await _IJSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _IJSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteProspectID != Guid.Empty)
        {
            var query = new DeleteProspectCommand(DeleteProspectID);
            var result = await Mediator.Send(query);
            if (result)
            {
                await _IJSRuntime.ToastrSuccess("Prospect Delete Successfully");
            }
            else
            {
                await _IJSRuntime.ToastrError("Prospect Delete InSuccessfully");
            }
            await LoadProspects();
            StateHasChanged();
        }
        DeleteProspectID = Guid.Empty;
        IsProcessing = false;
    }
}

