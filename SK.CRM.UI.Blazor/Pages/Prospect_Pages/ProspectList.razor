@attribute [Route(Routes.Crm_Prospects)]
@rendermode InteractiveServer
@inject IMediator Mediator
@inject IJSRuntime _IJSRuntime
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ILogger<ProspectList> Logger
@inject NavigationManager _NavigationManager
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]

<BsModal OnModalConfirmation="ConfirmDelete_Click"
    ButtonBootsrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to Delete this Prospect?">
</BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> Prospect</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">

            <div class="row pb-3">
                <div class="col-12 ">
                    <a href=@Routes.Crm_Prospect_Create class="btn btn-light" title="Add New Prospect"><i class="bi bi-plus"></i> </a>
                </div>
            </div>
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
            Data="@customers" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">

                <Columns>
                    <RadzenDataGridColumn Property="FirstName" Title="First Name" Width="120px" />
                    <RadzenDataGridColumn Property="LastName" Title="Last Name" Width="120px" />
                    <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                    <RadzenDataGridColumn Property="Email" Title="Email" Width="160px" />
                    <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="customer">
                            <RadzenButton Shade="Shade.Lighter" Text="Edit" ButtonStyle="ButtonStyle.Primary" Click="@(()=>_NavigationManager.NavigateTo(Routes.GetProspectEditUrl(customer.Id)))" />
                            <RadzenButton Shade="Shade.Lighter" Text="Delete" ButtonStyle="ButtonStyle.Danger" Click="()=>HandleDelete(customer.Id)" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

                <EmptyTemplate>
                    <div class="text-center p-4">
                        <p class="alert alert-secondary">No Prospect yet! Here's a tip:</p>
                        <blockquote class="blockquote">"Good Prospect management leads to better business decisions!"</blockquote>
                        <RadzenButton Text="Add First Prospect" ButtonStyle="ButtonStyle.Success" Click="@(()=>_NavigationManager.NavigateTo(Routes.Crm_Prospect_Create))" />
                    </div>
                </EmptyTemplate>
            </RadzenDataGrid>
        </div>

    </div>
}
@code {
    public bool IsProcessing { get; set; } = true;
    private List<CustomerDto>? customers;
    private Guid DeleteProspectID { get; set; } = Guid.Empty;
    // OnInitializedAsync is called when the page is initialized
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Sending GetAllCustomersQuery to the mediator
                await LoadProspects();
                
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while loading prospects.");
                await _IJSRuntime.ToastrError("An unexpected error occurred while loading prospects. Please try again.");
            }
            finally
            {
                IsProcessing = false;
                StateHasChanged();
            }

        }
    }

    private async Task LoadProspects()
    {
            var query = new GetAllProspectsQuery();
            customers = await Mediator.Send(query);
    }
    private async Task HandleDelete(Guid id)
    {
        DeleteProspectID = id;
        await _IJSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        try
        {
            IsProcessing = true;
            await _IJSRuntime.InvokeVoidAsync("HideConfirmationModal");
            if (isConfirmed && DeleteProspectID != Guid.Empty)
            {
                var query = new DeleteProspectCommand(DeleteProspectID);
                var result = await Mediator.Send(query);
                if (result)
                {
                    await _IJSRuntime.ToastrSuccess("Prospect Delete Successfully");
                }
                else
                {
                    await _IJSRuntime.ToastrError("Prospect Delete InSuccessfully");
                }
                await LoadProspects();
                StateHasChanged();
            }
            DeleteProspectID = Guid.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while performing prospect delete.");

            await _IJSRuntime.ToastrError("An unexpected error occurred while performing prospect delete. Please try again.");
        }
        finally
        {
            IsProcessing = false;
        }

    }
}

