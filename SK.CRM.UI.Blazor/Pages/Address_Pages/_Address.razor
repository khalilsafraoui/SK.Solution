@using Microsoft.Extensions.Localization
@using SK.CRM.UI.Blazor.Resources
@rendermode InteractiveServer
@inject ICountryService countryService
@inject IStateService stateService
@inject ICityService cityService
@inject IStringLocalizer<CrmTextRessources> _localizer
<RadzenCard Class="p-4 shadow radzen-card-responsive">
    <div class="d-flex justify-content-between align-items-center py-2">
        <h4 class="fw-bold m-0" style="color: purple; letter-spacing: 1px;">
            📝 @_localizer["Addresses"]
        </h4>

        <RadzenButton Icon="add_circle"
                      Text=@_localizer["Add"]
                      Style="min-width: 160px; background-color: purple; border-color: purple; color: white;"
                      ButtonStyle="ButtonStyle.Primary"
                      Click="@AddNewAddress" />
    </div>

    @foreach (var address in Addresses.Reverse())
    {
        <div class="border p-3 mt-3 rounded shadow-sm position-relative">

            <button type="button" class="btn btn-link position-absolute top-0 end-0 m-2" @onclick="() => ToggleAddress(address)">
                @(IsExpanded(address) ? "▲" : "▼")
            </button>

            @if (IsExpanded(address))
            {
                <RadzenTemplateForm Data="address" TItem="AddressDto" Submit="@(() => UpsertAddress(address))">
                    <DataAnnotationsValidator />
                    <RadzenStack Gap="1rem" class="mt-5">
                    <RadzenRow Gap="1rem" >
                         <RadzenColumn Size="12" SizeSM="12">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Name"] Variant="Variant.Filled">
                                    <RadzenTextBox @bind-Value="address.Name" />
                                    <ValidationMessage For="@(() => address.Name)" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["Country"] Variant="Variant.Filled">
                                        <RadzenDropDown @bind-Value="address.CountryId" Data="Countries" TextProperty="@nameof(CountryDto.Name)" ValueProperty="@nameof(CountryDto.Code)" />
                                        <ValidationMessage For="@(() => address.CountryId)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["State"] Variant="Variant.Filled">
                                        <RadzenDropDown @bind-Value="address.StateId" Data="States" TextProperty="@nameof(StateDto.Name)" ValueProperty="@nameof(StateDto.Code)" />
                                        <ValidationMessage For="@(() => address.StateId)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["Street"] Variant="Variant.Filled">
                                        <RadzenTextBox @bind-Value="address.Street" />
                                        <ValidationMessage For="@(() => address.Street)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["ZipCode"] Variant="Variant.Filled">
                                        <RadzenTextBox @bind-Value="address.ZipCode" />
                                        <ValidationMessage For="@(() => address.ZipCode)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["Latitude"] Variant="Variant.Filled">
                                        <RadzenNumeric TValue="decimal" @bind-Value="address.Latitude" />
                                        <ValidationMessage For="@(() => address.Latitude)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeSM="6">
                                <RadzenStack>
                                    <RadzenFormField Text=@_localizer["Longitude"] Variant="Variant.Filled">
                                        <RadzenNumeric TValue="decimal" @bind-Value="address.Longitude" />
                                        <ValidationMessage For="@(() => address.Longitude)" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>


                    <RadzenRow Gap="1rem" >
                        <RadzenColumn Size="12" SizeSM="12">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["FullAddress"] Variant="Variant.Filled" >
                                        <RadzenTextBox @bind-Value="address.FullAddress" Disabled="true" />
                                    <ValidationMessage For="@(() => address.FullAddress)" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeSM="5">
                                <RadzenStack>

                                    <div>
                                        <RadzenCheckBox @bind-Value=@address.IsDeliveryAddress Name="CheckBox1" id="IsDeliveryAddress" />
                                        <RadzenLabel Text=@_localizer["IsDeliveryAddress"] Component="CheckBox1" class="rz-ms-2" />
                                    </div>
                                    <div>
                                        <RadzenCheckBox @bind-Value=@address.IsBillingAddress Name="CheckBox1" id="IsBillingAddress" @oninput="(e) => SetOnlyOneBillingAddress(e,address)" />
                                        <RadzenLabel Text=@_localizer["IsBillingAddress"] Component="CheckBox1" class="rz-ms-2" />
                                    </div>

                                    <div>
                                        <RadzenCheckBox @bind-Value=@address.IsDefault Name="CheckBox1" id="IsDefaultAddress" @oninput="(e) => SetOnlyOneDefaultAddress(e,address)" disabled="@(address.IsDefault)" />
                                        <RadzenLabel Text=@_localizer["IsDefaultAddress"] Component="CheckBox1" class="rz-ms-2" />
                                    </div>
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                   
                    <div class="d-flex flex-wrap gap-2 justify-content-end  pt-3">

                        <RadzenButton Text=@_localizer["Save"]
                                      Icon="check"
                                      Style="min-width: 150px;"
                                      ButtonType="ButtonType.Submit"
                                      ButtonStyle="ButtonStyle.Primary" />

                        <RadzenButton Text=@_localizer["Delete"]
                                      Icon="close"
                                      Style="min-width: 150px;"
                                      Click="@(() => RemoveAddress(address))"
                                      ButtonStyle="ButtonStyle.Danger" />
                    </div>
                </RadzenTemplateForm>
            }
            else
            {
                <RadzenStack Gap="0.25rem">
                    <RadzenText Style="font-weight: bold;">@address.Street</RadzenText>
                    <RadzenText>
                        @(address.StateId is not null ? States?.FirstOrDefault(x => x.Code == address.StateId)?.Name : "")@(", ")
                        @(address.CountryId is not null ? Countries?.FirstOrDefault(x => x.Code == address.CountryId)?.Name : "")@(", ")
                        @address.ZipCode
                    </RadzenText>
                </RadzenStack>

            }

        </div>
    }

</RadzenCard>

@code {

    [Parameter]
    public ICollection<AddressDto> Addresses { get; set; }

    [Parameter]
    public EventCallback<AddressDto> OnAddressSave { get; set; }

    [Parameter]
    public EventCallback<Guid> OnAddressDeleted { get; set; }

    private List<CountryDto> Countries = new();
    private List<StateDto> States = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Countries = await countryService.GetAllCountriesAsync();
            States = await stateService.GetAllStatesAsync();
            StateHasChanged();
        }
    }

    
    private void AddNewAddress()
    {
        var address = new AddressDto();
        if (!Addresses.Any())
        {
            address.IsDefault = true;
            Addresses.Add(address);
        }
        else
        {
            Addresses.Add(address); // Add a new empty address to the list
        }
        ToggleAddress(address);
    }

    // Ensure only one billing address is selected
    private void SetOnlyOneBillingAddress(ChangeEventArgs e, AddressDto selectedAddress)
    {
        if (Addresses.Count > 1)
        {
            if (e.Value is bool isBilling && isBilling)
            {
                foreach (var address in Addresses)
                {
                    if (address != selectedAddress)
                    {
                        address.IsBillingAddress = false;
                    }
                }
            }
        }
    }

    // Ensure only one default address is selected
    private void SetOnlyOneDefaultAddress(ChangeEventArgs e, AddressDto selectedAddress)
    {
        // if (Addresses.Count > 1)
        // {
        //     if (e.Value is bool isDefault && isDefault)
        //     {
        //         foreach (var address in Addresses)
        //         {
        //             if (address != selectedAddress)
        //             {
        //                 address.IsDefault = false;
        //             }
        //         }
        //     }
        // }
    }

    private HashSet<AddressDto> ExpandedAddresses = new(); // To track which ones are expanded

    private void ToggleAddress(AddressDto address)
    {

        if (ExpandedAddresses.Contains(address))
            ExpandedAddresses.Remove(address);
        else
        {
            ExpandedAddresses.Clear();
            ExpandedAddresses.Add(address);
        }

    }

    private async void RemoveAddress(AddressDto addressDto)
    {
        if (addressDto.Id != Guid.Empty)
            await OnAddressDeleted.InvokeAsync(addressDto.Id);
        else
            Addresses.Remove(addressDto);
    }

    private bool IsExpanded(AddressDto address) => ExpandedAddresses.Contains(address);



    private async Task UpsertAddress(AddressDto addressDto)
    {

        var addressParts = new List<string>();
        
        if(!string.IsNullOrWhiteSpace(addressDto.Street))
            addressParts.Add(addressDto.Street);

        if (!string.IsNullOrEmpty(addressDto.StateId))
            addressParts.Add(States.Where(x => x.Code == addressDto.StateId).Select(y => y.Name).First());

        if (!string.IsNullOrEmpty(addressDto.CountryId))
            addressParts.Add(Countries.Where(x => x.Code == addressDto.CountryId).Select(y => y.Name).First());


        if (!string.IsNullOrWhiteSpace(addressDto.ZipCode))
            addressParts.Add(addressDto.ZipCode);

        addressDto.FullAddress = string.Join(", ", addressParts);
        await OnAddressSave.InvokeAsync(addressDto);
    }


}
