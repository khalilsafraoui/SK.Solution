@using AutoMapper
@using SK.CRM.Application.Dtos
@using SK.Inventory.Application.Features.Categories.Queries
@using SK.Inventory.Application.Features.Products.Queries
@rendermode InteractiveServer
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject SharedStateService _SharedStateService
@inject IMapper _mapper

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">


        <div class="d-flex justify-content-center align-items-center p-3">
            <div class="d-flex align-items-center" style="width: 400px;">
                <input type="text" class="form-control rounded-pill"
                @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProductByName"
                placeholder="Search for Product Items!"
                style="width: 100%; padding: 20px;">
                <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
            </div>
        </div>



        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetActiveTabClass(0)" href="#" style="cursor: pointer" @onclick="()=> FilterProducts(0)">All</span>
                </li>
                @foreach (var cat in categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(cat.Id)" href="#" style="cursor: pointer" @onclick="()=> FilterProducts(cat.Id)">@cat.Name</span>
                    </li>
                }


            </ul>
            <div class="row mt-4 mx-1 g-4 justify-content-center">
                @if (_FilterProducts.Any())
                {
                    @foreach (var product in _FilterProducts)
                    {
                        <div class="col-12 col-md-6 col-lg-2 d-flex justify-content-center">
                            <div class="card shadow-lg border-0 rounded-4 p-3 text-center d-flex flex-column" style="width: 24rem; height: 26rem;">

                                @if (product.Id != ProductDetailsId)
                                {
                                    <!-- Special Tag -->
                                    @if (!string.IsNullOrEmpty(product.SpecialTag))
                                    {
                                        <span class="badge bg-danger position-absolute top-0 start-50 translate-middle-x mt-2">
                                            @product.SpecialTag
                                        </span>
                                    }

                                    <!-- Product Image -->
                                    <img class="card-img-top mx-auto"
                                    src="@product.ImageUrl"
                                    alt="@product.Name"
                                    style="width: 150px; height: 150px; object-fit: contain;">

                                    <div class="card-body d-flex flex-column justify-content-between flex-grow-1">
                                        <div>
                                            <h5 class="fw-bold">@product.Name</h5>
                                            <p class="fs-5 text-muted">@product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</p>
                                        </div>

                                        <div class="mt-auto">
                                            <button class="btn btn-primary w-100 shadow-sm mb-2" @onclick="()=>ShowDetails(product.Id)">View Details</button>
                                            <button class="btn btn-primary w-100 shadow-sm" @onclick="()=>AddOrderItem(product)">Add to Cart</button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card-body d-flex flex-column justify-content-between flex-grow-1">
                                        <div>
                                            @((MarkupString)product.Description)
                                        </div>

                                        <div class="mt-auto">
                                            <button class="btn btn-primary w-100 shadow-sm mb-2" @onclick="()=>ShowDetails(product.Id)">Close Details</button>
                                            <button class="btn btn-primary w-100 shadow-sm" @onclick="()=>AddOrderItem(product)">Add to Cart</button>
                                        </div>
                                    </div>
                                }

                            </div>
                        </div>
                    }

                }
                else
                {
                    <div class="d-flex flex-column justify-content-center align-items-center vh-50 text-center">
                        <i class="bi bi-box-seam" style="font-size: 4rem; color: #6c757d;"></i>
                        <h3 class="mt-3 text-muted">No Products Found</h3>
                        <p class="text-secondary">Try adjusting your search or adding new products.</p>
                    </div>
                }
                      
            </div>




        </div>
    </div>
}

@code {
    private IEnumerable<ProductDto> products = new List<ProductDto>();
    private IEnumerable<ProductDto> _FilterProducts = new List<ProductDto>();
    private IEnumerable<CategoryDto> categories = new List<CategoryDto>();
    private bool IsProcessing { get; set; } = true;
    private int _selectedCategprieId = 0;
    private string _searchText = string.Empty;
    private bool isDetailsVisible = false;
    private int ProductDetailsId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        var query = new GetAllProductsQuery();
        products = _mapper.Map<List<ProductDto>>(await Mediator.Send(query)); 
        FilterProducts(0);
    }

    private async Task LoadCategories()
    {
        var query = new GetAllCategoriesQuery();
        categories = _mapper.Map<List<CategoryDto>>(await Mediator.Send(query));
    }

    private void FilterProducts(int categoryId)
    {
        if (categoryId == 0)
        {
            _FilterProducts = products;
            _selectedCategprieId = categoryId;
            return;
        }
        else
        {
            _FilterProducts = products.Where(x => x.CategoryId == categoryId).ToList();
            _selectedCategprieId = categoryId;
            _searchText = string.Empty;
        }
    }

    private void FilterProductByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            _FilterProducts = products;
        }
        else
        {
            _FilterProducts = products.Where(x => x.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        _searchText = newValueOfSearchText;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategprieId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(ProductDto product)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isAuthenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        //if user is not authenticated, redirect to login page
        if (!isAuthenticated)
        {
            _NavigationManager.NavigateTo("account/login");
        }
        else
        {
            //add product to cart
            var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var command = new UpdateCartCommand(userId, product.Id, 1);
           
            var cart = await Mediator.Send(command);
            if (cart != null)
            {
                await _JSRuntime.ToastrSuccess("Product added to cart successfully!");
                var query = new GetTotalCartCountQuery(userId);
                
                _SharedStateService.TotalCartCount = await Mediator.Send(query);
            }
            else
            {
                await _JSRuntime.ToastrError("Failed to add product to cart!");
            }
        }
    }

    private void ShowDetails(int productId)
    {
        if (ProductDetailsId == 0 || ProductDetailsId == productId)
            isDetailsVisible = !isDetailsVisible;
        if (isDetailsVisible)
            ProductDetailsId = productId;
        else
            ProductDetailsId = 0;
    }

}
