@using Microsoft.Extensions.Localization
@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Items.Enum
@using SK.CRM.Application.Features.Quotes.Queries
@using SK.CRM.Application.Features.Quotes.Commands
@using SK.CRM.UI.Blazor.Pages.Shared.Items
@using SK.CRM.UI.Blazor.Resources
@attribute [Route(Routes.Crm_Order_Edit)]
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]
@rendermode InteractiveServer
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _JSRuntime
@inject ILogger<OrderEdit> Logger
@inject IStringLocalizer<CrmTextRessources> _localizer
<PageTitle>@_localizer["OrderEdit_PageTitle"]</PageTitle>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container py-4">
        <div class="row justify-content-center mb-4">
            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 @_localizer["OrderEdit_Section1_Title"]</h4>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Id"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Id.ToString()" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["Customer"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Name" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["Address"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.FullAddress" ReadOnly="true" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Status"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Status" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["OrderDate"] Variant="Variant.Filled">
                                    <RadzenDatePicker TValue="DateTime" Value="@order.OrderDate" DateFormat="yyyy-MM-dd" ReadOnly="true" />
                                </RadzenFormField>
                                
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </div>

            

            <_ManageItems SelectedItems="Items" OnItemsUpdateStatusChanged="HandleOrderCanBeSaved"></_ManageItems>

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="d-flex flex-wrap justify-content-between align-items-center">
                        <RadzenButton Text=@_localizer["BackToOrders"]
                                      Icon="arrow_back"
                                      Style="min-width: 160px;"
                                      ButtonStyle="ButtonStyle.Light"
                                      Click="@OnBackToOrders" Disabled="@isButtonsDisabled" />

                        <div class="d-flex flex-wrap gap-2 justify-content-end">
                            <RadzenButton Text=@_localizer["SaveChanges"]
                                          Icon="save"
                                          Style="min-width: 160px;"
                                          ButtonStyle="ButtonStyle.Info"
                                          Click="@(()=>OnSaveChanges(false))" Disabled="@isButtonsDisabled" />

                            @if (order.Status == OrderStatus.StatusPending)
                            {
                                <RadzenButton Text=@_localizer["PlaceOrder"]
                                              Icon="check"
                                              Style="min-width: 150px;"
                                              ButtonStyle="ButtonStyle.Primary"
                                              Click="@(()=>OnSaveChanges(true))" Disabled="@isButtonsDisabled" />
                            }



                            <RadzenButton Text=@_localizer["Cancel"]
                                          Icon="close"
                                          Style="min-width: 120px;"
                                          ButtonStyle="ButtonStyle.Light"
                                          Click="@(()=>UpdateOrderStatus(OrderStatus.StatusCancelled))" Disabled="@isButtonsDisabled" />
                        </div>
                    </div>
                </RadzenCard>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string id { get; set; }
    private OrderDto order = new OrderDto();
    private bool IsProcessing { get; set; } = true;

    
    private List<ExtensionItemDto> Items = new();
    bool IsItemsSaved = true;
    private async Task HandleOrderCanBeSaved(ItemGridUpdateStatus status)
    {
        if (status == ItemGridUpdateStatus.Saved)
            IsItemsSaved = true;
        else
            IsItemsSaved = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
        }
    }

    private async Task LoadOrder()
    {
        try
        {
            var query = new GetOrderByIdQuery(Guid.Parse(id));
            var result = await Mediator.Send(query);
            if (!result.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }

            order = result.OrderDto;
            var convertQuery = new ConvertToExtensionItemsDtoQuery(order.OrderDetails);
            var convertResult = await Mediator.Send(convertQuery);
            if (!convertResult.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }
            Items = convertResult.Items;
            
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching Order details for ID: {Id}", id);
            await _JSRuntime.ToastrError("An error occurred while fetching order details. Please try again later.");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }


    private async Task UpdateOrderStatus(string status)
    {
        try
        {
            var command = new UpdateOrderStatusCommand(order.Id, status, "");
            order = await Mediator.Send(command);
            await _JSRuntime.ToastrSuccess("Order Status Updated Successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status for ID: {OrderId}", order.Id);
            await _JSRuntime.ToastrError("Failed to update order status. Please try again later.");
        }
        finally
        {
            StateHasChanged();
        }
    }

    bool isButtonsDisabled = false;

    async Task OnSaveChanges(bool IsApproved)
    {
        try
        {
            if (IsApproved)
            {
                order.Status = OrderStatus.StatusApproved;
            }
            isButtonsDisabled = true;
            if (!IsItemsSaved)
            {
                await _JSRuntime.ToastrError("Please finish creating or editing the item before saving the order.");
                //Veuillez terminer la création ou la modification de l'article avant d'enregistrer la commande.
                //يرجى إنهاء إنشاء أو تعديل العنصر قبل حفظ الطلب.
                return;
            }
            await ConvertExtensionItemsDtoToOrderDetailsDto();
            var command = new UpdateOrderCommand(order); // Ensure this command exists
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Order updated successfully.");
                if (IsApproved)
                {
                    await Task.Delay(3000);
                    _NavigationManager.NavigateTo(Routes.Crm_Orders);
                }
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving order.");
            await _JSRuntime.ToastrError("An error occurred while saving.");
        }
        finally
        {
            isButtonsDisabled = false;
            await LoadOrder();
        }
    }

    private async Task ConvertExtensionItemsDtoToOrderDetailsDto()
    {
        try
        {
            var query = new ConvertExtensionItemsDtoToOrderDetailsDtoQuery(Items);
            var result = await Mediator.Send(query);

            if (result.IsSuccess)
            {
                order.OrderDetails = result.Items;
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating order items.");
            await _JSRuntime.ToastrError("An error occurred while updating order items.");
        }
    }

    void OnBackToOrders()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Orders);
    }
}
