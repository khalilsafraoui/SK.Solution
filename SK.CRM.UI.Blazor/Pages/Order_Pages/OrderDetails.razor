@using Microsoft.Extensions.Localization
@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Quotes.Commands
@using SK.CRM.Application.Features.Quotes.Queries
@using SK.CRM.UI.Blazor.Resources
@attribute [Route(Routes.Crm_Order_Details)]
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]
@rendermode InteractiveServer
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _JSRuntime
@inject ILogger<OrderDetails> Logger
@inject IStringLocalizer<CrmTextRessources> _localizer
<PageTitle>@_localizer["OrderDetails_PageTitle"]</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{


    <div class="container py-4">
        <div class="row justify-content-center mb-4">

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 @_localizer["OrderDetail_firstsection_title"]</h4>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Id"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Id.ToString()" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["Customer"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Name" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["Address"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.FullAddress" ReadOnly="true" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Status"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@order.Status" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["OrderDate"] Variant="Variant.Filled">
                                    <RadzenDatePicker TValue="DateTime" Value="@order.OrderDate" DateFormat="yyyy-MM-dd" ReadOnly="true" />
                                </RadzenFormField>
                                
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </div>

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">
                        📋 @_localizer["OrderItems"]
                    </h4>


                    <div class="card-body overflow-auto p-0">
                        <RadzenDataGrid @ref="orderItemsGrid"
                                        Data="@order.OrderDetails"
                                        TItem="OrderDetailDto"
                                        AllowFiltering="true"
                                        AllowPaging="true"
                                        PageSize="5"
                                        AllowSorting="true"
                                        Responsive="true">
                            <Columns>
                                <RadzenDataGridColumn Title=@_localizer["Items"]>
                                    <Template Context="orderItem">@orderItem.ProductName</Template>
                                    <FooterTemplate>
                                        @_localizer["ItemsCount"]: <b>(@order.OrderDetails.Count)</b>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["UnitPrice"]>
                                    <Template Context="orderItem">@orderItem.Price</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["Quantity"]>
                                    <Template Context="orderItem">@orderItem.Quantity</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["DiscountRate"]>
                                    <Template Context="orderItem">@orderItem.DiscountRate</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["TaxRate"]>
                                    <Template Context="orderItem">@orderItem.TaxRate</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["Total"]>
                                    <Template Context="orderItem">@orderItem.TotalAfterDiscountAndTax</Template>
                                    <FooterTemplate>
                                        @_localizer["Total"]: <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.OrderDetails.Sum(o => o.TotalAfterDiscountAndTax))</b>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>

                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenCard>
            </div>
           
            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="d-flex flex-wrap justify-content-between align-items-center">

                        <!-- Left-aligned Back button -->
                        <RadzenButton Text=@_localizer["BackToOrders"]
                                      Icon="arrow_back"
                                      Style="min-width: 160px;"
                                      ButtonStyle="ButtonStyle.Light"
                                      Click="@OnBackToOrders" />

                        @if (order.Status != OrderStatus.StatusCancelled && order.Status != OrderStatus.StatusCompleted)
                        {
                            <div class="d-flex flex-wrap gap-2 justify-content-end">
                                <RadzenButton Text=@_localizer["Cancel"]
                                              Icon="close"
                                              Style="min-width: 120px;"
                                              ButtonStyle="ButtonStyle.Light"
                                              Click="@(() => UpdateOrderStatus(OrderStatus.StatusCancelled))" />
                            
                            @if (order.Status == OrderStatus.StatusPending)
                            {
                                    <RadzenButton Text=@_localizer["Approve"]
                                                  Icon="fact_check"
                                                  Style="min-width: 160px;"
                                                  ButtonStyle="ButtonStyle.Primary"
                                                  Click="@(() => UpdateOrderStatus(OrderStatus.StatusApproved))" />
                                    <RadzenButton Text=@_localizer["Edit"]
                                                  Icon="edit"
                                                  Style="min-width: 120px;"
                                                  ButtonStyle="ButtonStyle.Success"
                                                  Click="@OnEdit" />
                            }
                            @if (order.Status == OrderStatus.StatusApproved)
                            {
                                    <RadzenButton Text=@_localizer["Ready"]
                                                  Icon="fact_check"
                                                  Style="min-width: 160px;"
                                                  ButtonStyle="ButtonStyle.Primary"
                                                  Click="@(() => UpdateOrderStatus(OrderStatus.StatusReadyForPickUp))" />
                            }
                            @if (order.Status == OrderStatus.StatusReadyForPickUp)
                            {
                                    <RadzenButton Text=@_localizer["Completed"]
                                                  Icon="fact_check"
                                                  Style="min-width: 160px;"
                                                  ButtonStyle="ButtonStyle.Success"
                                                  Click="@(() => UpdateOrderStatus(OrderStatus.StatusCompleted))" />
                                
                            }
                            </div>
                        }

                    </div>
                </RadzenCard>
            </div>



        </div>


    </div>
}
@code {
    [Parameter]
    public string id { get; set; }
    private OrderDto order = new OrderDto();
    private bool IsProcessing { get; set; } = true;
    RadzenDataGrid<OrderDetailDto> orderItemsGrid;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
        }
    }

    private async Task LoadOrder()
    {
        try
        {
            var query = new GetOrderByIdQuery(Guid.Parse(id));
            var result = await Mediator.Send(query);
            if (!result.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }

            order = result.OrderDto;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching Order details for ID: {Id}", id);
            await _JSRuntime.ToastrError("An error occurred while fetching order details. Please try again later.");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    void OnEdit()
    {
        _NavigationManager.NavigateTo(Routes.GetOrderEditUrl(Guid.Parse(id)));
    }

    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            var command = new UpdateQuoteStatusCommand(order.Id, newStatus);
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Order Status updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating order status.");
            await _JSRuntime.ToastrError("An error occurred while updating order status.");
        }
        finally
        {
            await LoadOrder();
        }
    }

    private async Task UpdateOrderStatus(string status)
    {
        try
        {
            var command = new UpdateOrderStatusCommand(order.Id, status, "");
            order = await Mediator.Send(command);
            await _JSRuntime.ToastrSuccess("Order Status Updated Successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating order status for ID: {OrderId}", order.Id);
            await _JSRuntime.ToastrError("Failed to update order status. Please try again later.");
        }
        finally
        {
            StateHasChanged();
        }
    }

    async Task OnCancel()
    {
        await UpdateStatus(QuoteStatus.StatusCancelled);
    }

    async Task OnUnderReview()
    {
        await UpdateStatus(QuoteStatus.StatusUnderReview);
    }

    void OnBackToOrders()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Orders);
    }

    async Task OnAccept()
    {
        await UpdateStatus(QuoteStatus.StatusAccepted);
    }

    async Task OnReject()
    {
        await UpdateStatus(QuoteStatus.StatusRejected);
    }

    
}

