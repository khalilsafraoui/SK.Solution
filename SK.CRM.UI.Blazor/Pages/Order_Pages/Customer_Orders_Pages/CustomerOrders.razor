@attribute [Route(Routes.Crm_Customer_Orders)]
@attribute [Authorize(Roles = RoleType.Customer)]
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager _NavigationManager
@inject ILogger<CustomerOrders> Logger
@inject IJSRuntime _IJSRuntime
@inject ICurrentUserService _CurrentUserService
@attribute [Authorize]
<PageTitle>Orders</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> Orders</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <div class="row pb-3" hidden>
                <div class="col-12 text-end">
                    <a href=@Routes.Crm_Order_Create class="btn btn-lg btn-secondary" style="width:250px"><i class="bi bi-plus-square"></i> Add New Order</a>
                </div>
            </div>
            @if (Orders.Any())
            {
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@Orders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" >
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" />
                        @*  <RadzenDataGridColumn Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
                            </Template>
                        </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn Property="Name" Title="Name"  Width="120px" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="160px" />
                        <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}"  Width="120px" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="order">
                                <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary" Click="@(()=>_NavigationManager.NavigateTo(Routes.GetCustomerOrderDetailsUrl(order.Id)))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </div>

    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderDto> Orders { get; set; } = new List<OrderDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsProcessing = true;
                await LoadOrders();
                
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while fetching customer Orders.");
                await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
            }
            finally
            {
                IsProcessing = false;
                StateHasChanged();
            }
       
        }
    }

    private async Task LoadOrders()
    {
        var UserId = await _CurrentUserService.GetUserIdAsync();
        var query = new GetAllOrdersQuery(UserId.ToString());
        Orders = await Mediator.Send(query);
    }
}

