@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IMediator Mediator
@inject IJSRuntime _IJSRuntime
@inject ILogger<_CustomerAddresses> Logger

<_Address Addresses="@addresses" OnAddressSave="UpsertAddress" OnAddressDeleted="DeleteAddress"></_Address>

@code {

    [Parameter]
    public string? CustomerId { get; set; }
    [Parameter]
    public List<AddressDto> addresses { get; set; } = new List<AddressDto>();

    private async Task LoadAddresses()
    {
        if (!string.IsNullOrWhiteSpace(CustomerId))
        {
            var query = new GetCustomerAddressesQuery(Guid.Parse(CustomerId));
            var result = await Mediator.Send(query);
            if (!result.IsSuccess)
            {
                addresses = new List<AddressDto>();
            }
            else
            {
                addresses = result.Addresses;
            }
        }
    }

    private async Task UpsertAddress(AddressDto addressDto)
    {
        try
        {
            if (addressDto.Id != Guid.Empty)
            {
                var query = new UpdateCustomerAddressCommand(addressDto);
                await Mediator.Send(query);
                await _IJSRuntime.ToastrSuccess("Address Updated Successfully");
            }
            else
            {
                var query = new CreateCustomerAddressCommand(Guid.Parse(CustomerId), addressDto);
                await Mediator.Send(query);
                await _IJSRuntime.ToastrSuccess("Address Created Successfully");
            }

            await LoadAddresses();
            StateHasChanged();
        }
        catch (ValidationException ex)
        {
            await _IJSRuntime.ToastrError(ex.Message);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while Saving or Updating An address.");
            await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
        }

    }

    private async Task DeleteAddress(Guid AddressId)
    {
        try
        {
            var query = new DeleteCustomerAddressCommand(AddressId);
            var result = await Mediator.Send(query);
            if (result.IsSuccess)
            {
                await _IJSRuntime.ToastrSuccess("Address Deleted Successfully");
            }
            else
            {
                await _IJSRuntime.ToastrError(result.ErrorMessage);
            }

            await LoadAddresses();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while Deleting An address.");
            await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
        }
   
    }

}
