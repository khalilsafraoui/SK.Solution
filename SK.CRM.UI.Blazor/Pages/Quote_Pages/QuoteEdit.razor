@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Items.Enum
@using SK.CRM.Application.Features.Quotes.Queries
@using SK.CRM.Application.Features.Quotes.Commands
@using SK.CRM.UI.Blazor.Pages.Shared.Items
@attribute [Route(Routes.Crm_Quote_Edit)]
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]
@rendermode InteractiveServer
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _JSRuntime
@inject ILogger<QuoteEdit> Logger

<PageTitle>Quote Edit</PageTitle>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container py-4">
        <div class="row justify-content-center mb-4">
            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 Quote Editing</h4>
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <p><strong>Quote ID: </strong>@quote.Id</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Address: </strong>@quote.FullAddress</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Status: </strong>@quote.Status</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Created: </strong>@quote.CreatedDate.ToString("dd/MM/yyyy")</p>
                        </div>

                        <div class="col-md-4">
                            <p><strong>Expires:</strong><InputDate @bind-Value="quote.ExpirationDate" class="form-control" /></p>
                        </div>




                    </div>
                </RadzenCard>
            </div>
            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="row mt-4">
                        <div class="col-12">
                            <label class="form-label fw-bold">Notes:</label>
                            <div>@quote.Notes</div>
                        </div>
                    </div>
                </RadzenCard>
            </div>

            <_ManageItems SelectedItems="Items" OnItemsUpdateStatusChanged="HandleQuoteCanBeSaved"></_ManageItems>

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="d-flex flex-wrap justify-content-between align-items-center">
                        <RadzenButton Text="Back to Quotes"
                        Icon="arrow_back"
                        Style="min-width: 160px;"
                        ButtonStyle="ButtonStyle.Light"
                        Click="@OnBackToQuotes" Disabled="@isButtonsDisabled" />

                        <div class="d-flex flex-wrap gap-2 justify-content-end">
                            @if (quote.Status == QuoteStatus.StatusSubmitted)
                            {
                                <RadzenButton Text="Under Review"
                                Icon="fact_check"
                                Style="min-width: 160px;"
                                ButtonStyle="ButtonStyle.Primary"
                                Click="@OnUnderReview" Disabled="@isButtonsDisabled" />
                            }
                            @if (quote.Status == QuoteStatus.StatusDraft || quote.Status == QuoteStatus.StatusUnderReview)
                            {
                                <RadzenButton Text="Mark as Quoted"
                                Icon="check"
                                Style="min-width: 150px;"
                                ButtonStyle="ButtonStyle.Info"
                                Click="@OnMarkAsQuoted" Disabled="@isButtonsDisabled" />
                            }

                            <RadzenButton Text="Save Changes"
                            Icon="save"
                            Style="min-width: 160px;"
                            ButtonStyle="ButtonStyle.Primary"
                            Click="@OnSaveChanges" Disabled="@isButtonsDisabled" />

                            <RadzenButton Text="Cancel"
                            Icon="close"
                            Style="min-width: 120px;"
                            ButtonStyle="ButtonStyle.Light"
                            Click="@OnCancel" Disabled="@isButtonsDisabled" />
                        </div>
                    </div>
                </RadzenCard>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string id { get; set; }
    private QuoteDto quote = new QuoteDto();
    private bool IsProcessing { get; set; } = true;

    DateTime expirationDate = DateTime.UtcNow.AddDays(15);
    private List<ExtensionItemDto> Items = new();
    bool IsItemsSaved = true;
    private async Task HandleQuoteCanBeSaved(ItemGridUpdateStatus status)
    {
        if (status == ItemGridUpdateStatus.Saved)
            IsItemsSaved = true;
        else
            IsItemsSaved = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadQuote();
        }
    }

    private async Task LoadQuote()
    {
        try
        {
            var query = new GetQuoteByIdQuery(Guid.Parse(id));
            var result = await Mediator.Send(query);
            if (!result.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }

            quote = result.QuoteDto;
            var convertQuery = new ConvertToExtensionItemsDtoQuery(quote.Items);
            var convertResult = await Mediator.Send(convertQuery);
            if (!convertResult.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }
            Items = convertResult.Items;
            if (quote.ExpirationDate is null)
            {
                quote.ExpirationDate = expirationDate;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching Quote details for ID: {Id}", id);
            await _JSRuntime.ToastrError("An error occurred while fetching quote details. Please try again later.");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }


    async Task OnMarkAsQuoted()
    {
        await UpdateStatus(QuoteStatus.StatusQuoted);
    }

    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            var command = new UpdateQuoteStatusCommand(quote.Id, newStatus);
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Quote Status updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating quote status.");
            await _JSRuntime.ToastrError("An error occurred while updating quote status.");
        }
        finally
        {
            _NavigationManager.NavigateTo(Routes.GetQuoteDetailsUrl(quote.Id));
        }
    }

    bool isButtonsDisabled = false;
    async Task OnSaveChanges()
    {
        try
        {
            isButtonsDisabled = true;
            if (!IsItemsSaved)
            {
                await _JSRuntime.ToastrError("Please finish creating or editing the item before saving the order.");
                //Veuillez terminer la création ou la modification de l'article avant d'enregistrer la commande.
                //يرجى إنهاء إنشاء أو تعديل العنصر قبل حفظ الطلب.
                return;
            }
            await ConvertExtensionItemsDtoToQuoteItemsDto();
            var command = new UpdateQuoteRequestCommand(quote); // Ensure this command exists
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Quote updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving quote.");
            await _JSRuntime.ToastrError("An error occurred while saving.");
        }
        finally
        {
            isButtonsDisabled = false;
            await LoadQuote();
        }
    }

    private async Task ConvertExtensionItemsDtoToQuoteItemsDto()
    {
        try
        {
            var query = new ConvertExtensionItemsDtoToQuoteItemsDtoQuery(Items);
            var result = await Mediator.Send(query);

            if (result.IsSuccess)
            {
                quote.Items = result.Items;
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating quote items.");
            await _JSRuntime.ToastrError("An error occurred while updating quote items.");
        }
    }

    async Task OnCancel()
    {
        await UpdateStatus(QuoteStatus.StatusCancelled);
    }

    async Task OnUnderReview()
    {
        await UpdateStatus(QuoteStatus.StatusUnderReview);
    }

    void OnBackToQuotes()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Quotes);
    }
}
