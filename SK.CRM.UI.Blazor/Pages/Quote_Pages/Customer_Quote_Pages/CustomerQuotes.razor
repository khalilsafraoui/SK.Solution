@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Quotes.Queries
@attribute [Route(Routes.Crm_Customer_Quotes)]
@attribute [Authorize(Roles = RoleType.Customer)]
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager _NavigationManager
@inject ILogger<CustomerQuotes> Logger
@inject IJSRuntime _IJSRuntime
@inject ICurrentUserService _CurrentUserService
@attribute [Authorize]
<PageTitle>Quotes</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container py-4">
        <div class="row justify-content-center mb-4">

            <div class="col-12 pt-1">
                <RadzenCard class="p-4 shadow radzen-card-responsive">
                    <div class="row align-items-center justify-content-between">

                        <!-- Left: Title -->
                        <div class="col-12 col-md-auto mb-2 mb-md-0 text-center text-md-start">
                            <h2 class="m-0 fw-bold" style="color: purple; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
                                Quotes
                            </h2>
                        </div>

                        <!-- Right: Create New Quote -->
                        @* <div class="col-12 col-md-auto d-flex justify-content-center justify-content-md-end">
                            <RadzenButton Text="Create"
                                          Icon="add_circle"
                                          Style="min-width: 160px; background-color: purple; border-color: purple; color: white;"
                                          ButtonStyle="ButtonStyle.Primary"
                                          Click="@OnCreateNewQuote" />
                        </div> *@

                    </div>
                </RadzenCard>
            </div>


            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    


                    <div class="card-body overflow-auto p-0">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                        Data="@Quotes" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Responsive="true">
                            <Columns>
                                <RadzenDataGridColumn Property="Id" Filterable="false" Title="ID"  Width="80px" />
                                <RadzenDataGridColumn Property="CreatedDate" Title="Creation Date" FormatString="{0:d}" Width="160px" />
                                <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                                <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                                    <Template Context="quote">
                                        <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary" Click="@(()=>_NavigationManager.NavigateTo(Routes.GetCustomerQuoteDetailsUrl(quote.Id)))" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenCard>
            </div>

        </div>


    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<QuoteDto> Quotes { get; set; } = new List<QuoteDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsProcessing = true;
                await LoadQuotes();
                
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while fetching customer Quotes.");
                await _IJSRuntime.ToastrError("An unexpected error occurred. Please try again later. If the problem persists, contact support.");
            }
            finally
            {
                IsProcessing = false;
                StateHasChanged();
            }
       
        }
    }

    private async Task LoadQuotes()
    {
        var UserId = await _CurrentUserService.GetUserIdAsync();
        var query = new GetAllQuotesQuery(UserId.ToString());
        var result = await Mediator.Send(query);
        if (result.IsSuccess)
        {
            Quotes = result.QuotesDto;
        }
        else
        {
            Logger.LogError("Failed to load quotes: {Error}", result.ErrorMessage);
            await _IJSRuntime.ToastrError("Failed to load quotes. Please try again later.");
        }
    }
}

