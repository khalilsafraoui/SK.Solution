@using Microsoft.Extensions.Localization
@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Quotes.Commands
@using SK.CRM.Application.Features.Quotes.Queries
@using SK.CRM.UI.Blazor.Resources
@attribute [Route(Routes.Crm_Customer_Quote_Details)]
@attribute [Authorize(Roles = RoleType.Customer)]
@rendermode InteractiveServer
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _JSRuntime
@inject ILogger<CustomerQuoteDetails> Logger
@inject IStringLocalizer<CrmTextRessources> _localizer
<PageTitle>@_localizer["QuoteDetails_PageTitle"]</PageTitle>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{


    <div class="container py-4">
        <div class="row justify-content-center mb-4">

            

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 @_localizer["QuoteDetail_firstsection_title"]</h4>
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Id"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@quote.Id.ToString()" ReadOnly="true" />
                                </RadzenFormField>
                                
                                <RadzenFormField Text=@_localizer["Address"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@quote.FullAddress" ReadOnly="true" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text=@_localizer["Status"] Variant="Variant.Filled">
                                    <RadzenTextBox Value="@quote.Status" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["CreatedDate"] Variant="Variant.Filled">
                                    <RadzenDatePicker TValue="DateTime" Value="@quote.CreatedDate" DateFormat="yyyy-MM-dd" ReadOnly="true" />
                                </RadzenFormField>
                                <RadzenFormField Text=@_localizer["SelectExpirationDate"] Variant="Variant.Filled">
                                    <RadzenDatePicker TValue="DateTime" Value="quote.ExpirationDate"
                                                      DateFormat="yyyy-MM-dd"
                                                      Style="width: 100%;" ReadOnly="true" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </div>

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 @_localizer["Note"]</h4>
                    <RadzenTextArea Value="@quote.Notes" Style="width: 100%" aria-label="TextArea" ReadOnly="true" />
                </RadzenCard>
            </div>

            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">
                        📋 @_localizer["QuoteItems"]
                    </h4>


                    <div class="card-body overflow-auto p-0">
                        <RadzenDataGrid @ref="quoteItemsGrid"
                                        Data="@quote.Items"
                                        TItem="QuoteItemDto"
                                        AllowFiltering="true"
                                        AllowPaging="true"
                                        PageSize="5"
                                        AllowSorting="true"
                                        Responsive="true">
                            <Columns>
                                <RadzenDataGridColumn Title=@_localizer["Items"]>
                                    <Template Context="quoteItem">@quoteItem.ProductName</Template>
                                    <FooterTemplate>
                                        @_localizer["ItemsCount"]: <b>(@quote.Items.Count)</b>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["UnitPrice"]>
                                    <Template Context="quoteItem">@quoteItem.UnitPrice</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["Quantity"]>
                                    <Template Context="quoteItem">@quoteItem.Quantity</Template>
                                </RadzenDataGridColumn>
                                @if (quote.Status == QuoteStatus.StatusQuoted || quote.Status == QuoteStatus.StatusAccepted || quote.Status == QuoteStatus.StatusRejected || quote.Status == QuoteStatus.StatusExpired)
                                {
                                <RadzenDataGridColumn Title=@_localizer["DiscountRate"]>
                                    <Template Context="quoteItem">@quoteItem.DiscountRate</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["TaxRate"]>
                                    <Template Context="quoteItem">@quoteItem.TaxRate</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Title=@_localizer["Total"]>
                                    <Template Context="quoteItem">@quoteItem.TotalAfterDiscountAndTax</Template>
                                    <FooterTemplate>
                                        @_localizer["Total"]: <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", @quote.Items.Sum(o => o.TotalAfterDiscountAndTax))</b>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                }
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenCard>
            </div>


            <div class="col-12 col-md-12 pt-1">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="d-flex flex-wrap justify-content-between align-items-center">

                        <!-- Left-aligned Back button -->
                        <RadzenButton Text=@_localizer["BackToQuotes"]
                        Icon="arrow_back"
                        Style="min-width: 160px;"
                        ButtonStyle="ButtonStyle.Light"
                        Click="@OnBackToQuotes" />

                        <!-- Right-aligned action buttons -->
                        <div class="d-flex flex-wrap gap-2 justify-content-end">
                            @if (quote.Status == QuoteStatus.StatusAccepted)
                            {
                                <RadzenButton Text=@_localizer["ProceedToOrder"]
                                Icon="swap_horiz"
                                Style="min-width: 160px;"
                                ButtonStyle="ButtonStyle.Primary"
                                Click="@OnProceedToOrder" />
                            }
                            @if (quote.Status == QuoteStatus.StatusQuoted)
                            {
                                <RadzenButton Text=@_localizer["Accept"]
                                Icon="check"
                                Style="min-width: 120px;"
                                ButtonStyle="ButtonStyle.Success"
                                Click="@OnAccept" />

                                <RadzenButton Text=@_localizer["Reject"]
                                Icon="cancel"
                                Style="min-width: 120px;"
                                ButtonStyle="ButtonStyle.Danger"
                                Click="@OnReject" />
                            }
                            @if (quote.Status != QuoteStatus.StatusRejected && quote.Status != QuoteStatus.StatusCancelled && quote.Status != QuoteStatus.StatusCompleted)
                            {
                                <RadzenButton Text=@_localizer["Cancel"]
                                Icon="close"
                                Style="min-width: 120px;"
                                ButtonStyle="ButtonStyle.Light"
                                Click="@OnCancel" />
                            }
                        </div>
                    </div>
                </RadzenCard>
            </div>



        </div>


    </div>
}
@code{
    [Parameter]
    public string id { get; set; }
    private QuoteDto quote = new QuoteDto();
    private bool IsProcessing{ get; set; } = true;
    RadzenDataGrid<QuoteItemDto> quoteItemsGrid;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadQuote();
        }
    }

    private async Task LoadQuote()
    {
        try
        {
            var query = new GetQuoteByIdQuery(Guid.Parse(id));
            var result = await Mediator.Send(query);
            if (!result.IsSuccess)
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
                _NavigationManager.NavigateTo(Routes.Crm_Orders);
            }

            quote = result.QuoteDto;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching Quote details for ID: {Id}", id);
            await _JSRuntime.ToastrError("An error occurred while fetching quote details. Please try again later.");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            var command = new UpdateQuoteStatusCommand(quote.Id, newStatus);
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Quote Status updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating quote status.");
            await _JSRuntime.ToastrError("An error occurred while updating quote status.");
        }
        finally
        {
            await LoadQuote();
        }
    }
    async Task OnAccept()
    {
        await UpdateStatus(QuoteStatus.StatusAccepted);
    }

    async Task OnReject()
    {
        await UpdateStatus(QuoteStatus.StatusRejected);
    }

    async Task OnCancel()
    {
        await UpdateStatus(QuoteStatus.StatusCancelled);
    }

    private async Task OnProceedToOrder()
    {
        try
        {
            IsProcessing = true;

            var createOrderCommand = new CreateOrderFromQuoteCommand(Guid.Parse(id));
            var orderResult = await Mediator.Send(createOrderCommand);

            if (!orderResult.IsSuccess)
            {
                await _JSRuntime.ToastrError(orderResult.ErrorMessage);
                return;
            }
            _NavigationManager.NavigateTo(Routes.GetCustomerOrderConfirmedUrl(orderResult.OrderDto.Id, quote.UserId));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while processing the order for ID: {Id}", id);
            await _JSRuntime.ToastrError("An error occurred while processing the order. Please try again later.");
        }
        finally
        {
            await LoadQuote();
        }
    }


    void OnBackToQuotes()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Customer_Quotes);
    }
}

