@using SK.CRM.Application.DTOs.Quote
@using SK.CRM.Application.Features.Quotes.Queries
@using SK.CRM.Application.Features.Quotes.Commands
@attribute [Authorize(Roles = RoleType.Crm_Manager + "," + RoleType.Crm_Viewer)]
@rendermode InteractiveServer
@inject NavigationManager _NavigationManager
@inject IMediator Mediator
@inject IJSRuntime _JSRuntime
@inject ILogger<_QuoteAdd_Overview> Logger

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="container py-4">
        <div class="row justify-content-center mb-4">
            <div class="col-12 col-md-12 pt-4">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📝 Quote</h4>
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <p><strong>Customer: </strong>@quote.FullName</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Address: </strong>@quote.FullAddress</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Status: </strong>@quote.Status</p>
                        </div>
                        

                        <div class="col-md-4">
                            <p><strong>Expires:</strong><InputDate @bind-Value="quote.ExpirationDate" class="form-control" /></p>
                        </div>




                    </div>
                </RadzenCard>
            </div>
            
            <div class="col-12 col-md-12 pt-4">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <h4 class="fw-bold" style="color: purple; letter-spacing: 1px;">📋 Items</h4>
                    <div class="card-body overflow-auto p-0">
                        <RadzenDataGrid @ref="quoteItemsGrid"
                                        Data="@quote.Items"
                                        TItem="QuoteItemDto"
                                        AllowFiltering="true"
                                        AllowPaging="true"
                                        PageSize="5"
                                        AllowSorting="true"
                                        Editable="true"
                                        EditMode="DataGridEditMode.Single"
                                        Responsive="true">
                            <Columns>
                                <RadzenDataGridColumn TItem="QuoteItemDto" Property="ProductName" Title="Product" />
                                <RadzenDataGridColumn TItem="QuoteItemDto" Property="UnitPrice" Title="Unit Price" >
                                    <EditTemplate Context="item">
                                        <InputNumber @bind-Value="item.UnitPrice" step="0.01" min="0" max="10000" class="form-control" />
                                    </EditTemplate>
                                    <Template Context="item">
                                        @item.UnitPrice
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn TItem="QuoteItemDto" Property="Quantity" Title="Quantity">
                                    <EditTemplate Context="item">
                                        <InputNumber @bind-Value="item.Quantity" step="1" min="0" max="10000" class="form-control" />
                                    </EditTemplate>
                                    <Template Context="item">
                                        @item.Quantity
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="QuoteItemDto" Property="DiscountRate" Title="Discount Rate (%)">
                                    <EditTemplate Context="item">
                                        <InputNumber @bind-Value="item.DiscountRate" step="0.01" min="0" max="1" class="form-control" />
                                    </EditTemplate>
                                    <Template Context="item">
                                        @(item.DiscountRate * 100)%
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="QuoteItemDto" Title="Total">
                                    <Template Context="item">@item.TotalAfterDiscount?.ToString("C", CultureInfo.CurrentCulture)</Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn TItem="QuoteItemDto" Context="item" Width="160px">
                                    <Template Context="item">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => EditRow(item))" />

                                    </Template>
                                    <EditTemplate Context="item">
                                        <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Click="@(() => SaveRow(item))" Class="ms-2" />
                                    </EditTemplate>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                    </div>
                </RadzenCard>
            </div>

            <div class="col-12 col-md-12 pt-4">
                <RadzenCard Class="p-4 shadow radzen-card-responsive">
                    <div class="row mt-4">
                        <div class="col-md-3">
                            <label class="form-label fw-bold">Subtotal:</label>
                            <div>@quote.Subtotal?.ToString("C", CultureInfo.CurrentCulture)</div>
                        </div>

                        <div class="col-md-3">
                            <label class="form-label fw-bold">Global Discount (%):</label>
                            <InputNumber @bind-Value="quote.GlobalDiscountRate" class="form-control" step="0.01" min="0" max="1" @oninput=@ValidateGlobalDiscount />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label fw-bold">Tax:</label>
                            <div>@quote.TaxAmount?.ToString("C", CultureInfo.CurrentCulture) (@(quote.TaxRate * 100)%)</div>
                        </div>

                        <div class="col-md-3">
                            <label class="form-label fw-bold">Total:</label>
                            <div>@quote.Total?.ToString("C", CultureInfo.CurrentCulture)</div>
                        </div>
                    </div>
                </RadzenCard>
            </div>
            
        </div>
    </div>
}

@code {
    [Parameter] 
    public QuoteDto quote { get; set; } = new QuoteDto();
    private bool IsProcessing { get; set; } = false;
    RadzenDataGrid<QuoteItemDto> quoteItemsGrid;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
        }
    }

    async Task OnMarkAsQuoted()
    {
        await UpdateStatus(QuoteStatus.StatusQuoted);
    }

    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            var command = new UpdateQuoteStatusCommand(quote.Id, newStatus);
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Quote Status updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while updating quote status.");
            await _JSRuntime.ToastrError("An error occurred while updating quote status.");
        }
        finally
        {
            _NavigationManager.NavigateTo(Routes.GetQuoteDetailsUrl(quote.Id));
        }
    }

    async Task OnSaveChanges()
    {
        try
        {
            var command = new UpdateQuoteRequestCommand(quote); // Ensure this command exists
            var result = await Mediator.Send(command);

            if (result.IsSuccess)
            {
                await _JSRuntime.ToastrSuccess("Quote updated successfully.");
            }
            else
            {
                await _JSRuntime.ToastrError(result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving quote.");
            await _JSRuntime.ToastrError("An error occurred while saving.");
        }
        finally
        {
            
        }
    }

    async Task OnCancel()
    {
        await UpdateStatus(QuoteStatus.StatusCancelled);
    }

    async Task OnUnderReview()
    {
        await UpdateStatus(QuoteStatus.StatusUnderReview);
    }

    void OnBackToQuotes()
    {
        _NavigationManager.NavigateTo(Routes.Crm_Quotes);
    }

    private void EditRow(QuoteItemDto item)
    {
        quoteItemsGrid.EditRow(item);
    }

    private void SaveRow(QuoteItemDto item)
    {
        if (item.DiscountRate > 1)
        {
            item.DiscountRate = 1;
        }

        if (item.DiscountRate < 0)
        {
            item.DiscountRate = 0;
        }
        quoteItemsGrid.UpdateRow(item);
        // You can optionally recalculate totals here if needed
    }

    private void ValidateGlobalDiscount(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var val))
        {
            if (val > 1) quote.GlobalDiscountRate = 1;
            else if (val < 0) quote.GlobalDiscountRate = 0;
            else quote.GlobalDiscountRate = val;
        }
    }
}
