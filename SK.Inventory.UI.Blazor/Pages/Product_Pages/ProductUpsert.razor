@attribute [Route(Routes.Inventory_Product_Create)]
@attribute [Route(Routes.Inventory_Product_Edit)]
@attribute [Authorize(Roles = RoleType.Inventory_Manager + "," + RoleType.Inventory_Viewer + "," + RoleType.Inventory_Coordinator)]
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager _NavigationManager
@inject IJSRuntime _IJSRuntime
@inject IWebHostEnvironment _IWebHostEnvironment
@inject IOptions<InventorySettings> options
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading">
    </div>
}
else
{
    <div class="card shadow border-0 m-4">

        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> @(Id>0? "Edit":"Add") Product</h2>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            <EditForm Model="product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator/>
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="product.Name" class="form-control" id="Name" DisplayName="Name"/>
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(()=> product.Name)"/>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <label for="Description">Description</label>
                        <RadzenHtmlEditor @bind-Value=product.Description style="height: 450px;" />
                        <ValidationMessage For="@(()=> product.Description)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="product.SpecialTag" class="form-control" id="SpecialTag" DisplayName="SpecialTag" />
                        <label for="SpecialTag">Special Tag</label>
                        <ValidationMessage For="@(()=> product.SpecialTag)" />
                    </div>
                    <div class="row">
                    <div class="form-floating py-3 col-4">
                        <InputNumber @bind-Value="product.Price" class="form-control" id="Price" DisplayName="Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(()=> product.Price)" />
                    </div>
                    <div class="form-floating py-3 col-2">
                        <InputNumber @bind-Value="product.DiscountRate" class="form-control" id="DiscountRate" min="0" max="1" step="0.01" DisplayName="Discount Rate" />
                        <label for="DiscountRate">Discount Rate</label>
                        <ValidationMessage For="@(()=> product.DiscountRate)" />
                    </div>
                    <div class="form-floating py-3 col-2">
                            <p>@(Math.Round(product.DiscountRate * 100)) %</p>
                     </div>
                    <div class="form-floating py-3 col-2">
                            <InputNumber @bind-Value="product.TaxRate" class="form-control" id="TaxRate" min="0" max="1" step="0.01" DisplayName="Tax Rate" />
                        <label for="TaxRate">Tax Rate</label>
                        <ValidationMessage For="@(()=> product.TaxRate)" />
                    </div>
                        <div class="form-floating py-3 col-2">
                            <p>@(Math.Round(product.TaxRate * 100))%</p>
                        </div>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="product.CategoryId" class="form-select" id="category" DisplayName="category" >
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var cat in _categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(()=> product.CategoryId)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        @if (product.ImageUrl is null)
                        {
                            <InputFile OnChange="LoadFiles" class="form-control" id="customFile" accesskey="image/x-png,image/jpeg" ></InputFile>
                            <label for="customFile">Upload Image</label>
                        }
                        @if (product.ImageUrl != null)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@product.ImageUrl" alt="product image" class="img-thumbnail" />
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>

                        }
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-save"></i> Save
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href=@Routes.Inventory_products class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>

    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private bool IsProcessing { get; set; } = true;



    private string? _directoryPath { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var productPathFromSettings = options.Value.ProductsImagesPath;
        _directoryPath = Path.Combine(_IWebHostEnvironment.WebRootPath, productPathFromSettings);
    }

    [SupplyParameterFromForm(FormName = "ProductUpsertForm")]
    private ProductDto product { get; set; } = new ProductDto();

    private IEnumerable<CategoryDto> _categories { get; set; } = new List<CategoryDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            var query = new GetProductByIdQuery(Id);
            product = await Mediator.Send(query);
        }
        var getCategoriesQuery = new GetAllCategoriesQuery();
        _categories = await Mediator.Send(getCategoriesQuery);
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (product.DiscountRate > 1)
        {
            product.DiscountRate = 1;
        }
        if (product.DiscountRate < 0)
        {
            product.DiscountRate = 0;
        }
        if (product.TaxRate > 1)
        {
            product.TaxRate = 1;
        }
        if (product.TaxRate < 0)
        {
            product.TaxRate = 0;
        }
        if(product.Id > 0)
        {
            var query = new UpdateProductCommand(product);
            product = await Mediator.Send(query);
            await _IJSRuntime.ToastrSuccessWithDelay("Product Updated Successfully");
        }
        else
        {
            var query = new CreateProductCommand(product);
            product = await Mediator.Send(query);
            await _IJSRuntime.ToastrSuccessWithDelay("Product Created Successfully");
        }
        IsProcessing = false;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        var file = e.File;
        System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";

        if (!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }
        var filePath = Path.Combine(_directoryPath, newFileName);
        await using FileStream fileStream = new(filePath, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        fileStream.Close();
        var path = options.Value.ProductsImagesPath;
        product.ImageUrl = $"{path}/{newFileName}";
        IsProcessing = false;
    }

    void DeleteImage()
    {
        if (product.ImageUrl == null)
        {
            return;
        }
        var fileToDelete = product.ImageUrl.Split('/').Reverse().First();
        var filePath = Path.Combine(_directoryPath, fileToDelete);
        if (!File.Exists(filePath))
        {
            product.ImageUrl = null;
            return;
        }
        File.Delete(filePath);
        product.ImageUrl = null;
        return;
    }
}
